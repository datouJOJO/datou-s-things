/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 519.0, "minX": 0.0, "maxY": 11505.0, "series": [{"data": [[0.0, 3773.0], [0.1, 3773.0], [0.2, 3773.0], [0.3, 3773.0], [0.4, 3773.0], [0.5, 3773.0], [0.6, 3773.0], [0.7, 3773.0], [0.8, 3773.0], [0.9, 3773.0], [1.0, 4047.0], [1.1, 4047.0], [1.2, 4047.0], [1.3, 4047.0], [1.4, 4047.0], [1.5, 4047.0], [1.6, 4047.0], [1.7, 4047.0], [1.8, 4047.0], [1.9, 4047.0], [2.0, 4286.0], [2.1, 4286.0], [2.2, 4286.0], [2.3, 4286.0], [2.4, 4286.0], [2.5, 4286.0], [2.6, 4286.0], [2.7, 4286.0], [2.8, 4286.0], [2.9, 4286.0], [3.0, 4348.0], [3.1, 4348.0], [3.2, 4348.0], [3.3, 4348.0], [3.4, 4348.0], [3.5, 4348.0], [3.6, 4348.0], [3.7, 4348.0], [3.8, 4348.0], [3.9, 4348.0], [4.0, 4528.0], [4.1, 4528.0], [4.2, 4528.0], [4.3, 4528.0], [4.4, 4528.0], [4.5, 4528.0], [4.6, 4528.0], [4.7, 4528.0], [4.8, 4528.0], [4.9, 4528.0], [5.0, 4543.0], [5.1, 4543.0], [5.2, 4543.0], [5.3, 4543.0], [5.4, 4543.0], [5.5, 4543.0], [5.6, 4543.0], [5.7, 4543.0], [5.8, 4543.0], [5.9, 4543.0], [6.0, 4554.0], [6.1, 4554.0], [6.2, 4554.0], [6.3, 4554.0], [6.4, 4554.0], [6.5, 4554.0], [6.6, 4554.0], [6.7, 4554.0], [6.8, 4554.0], [6.9, 4554.0], [7.0, 4637.0], [7.1, 4637.0], [7.2, 4637.0], [7.3, 4637.0], [7.4, 4637.0], [7.5, 4637.0], [7.6, 4637.0], [7.7, 4637.0], [7.8, 4637.0], [7.9, 4637.0], [8.0, 4646.0], [8.1, 4646.0], [8.2, 4646.0], [8.3, 4646.0], [8.4, 4646.0], [8.5, 4646.0], [8.6, 4646.0], [8.7, 4646.0], [8.8, 4646.0], [8.9, 4646.0], [9.0, 4933.0], [9.1, 4933.0], [9.2, 4933.0], [9.3, 4933.0], [9.4, 4933.0], [9.5, 4933.0], [9.6, 4933.0], [9.7, 4933.0], [9.8, 4933.0], [9.9, 4933.0], [10.0, 4936.0], [10.1, 4936.0], [10.2, 4936.0], [10.3, 4936.0], [10.4, 4936.0], [10.5, 4936.0], [10.6, 4936.0], [10.7, 4936.0], [10.8, 4936.0], [10.9, 4936.0], [11.0, 4955.0], [11.1, 4955.0], [11.2, 4955.0], [11.3, 4955.0], [11.4, 4955.0], [11.5, 4955.0], [11.6, 4955.0], [11.7, 4955.0], [11.8, 4955.0], [11.9, 4955.0], [12.0, 4960.0], [12.1, 4960.0], [12.2, 4960.0], [12.3, 4960.0], [12.4, 4960.0], [12.5, 4960.0], [12.6, 4960.0], [12.7, 4960.0], [12.8, 4960.0], [12.9, 4960.0], [13.0, 5012.0], [13.1, 5012.0], [13.2, 5012.0], [13.3, 5012.0], [13.4, 5012.0], [13.5, 5012.0], [13.6, 5012.0], [13.7, 5012.0], [13.8, 5012.0], [13.9, 5012.0], [14.0, 5067.0], [14.1, 5067.0], [14.2, 5067.0], [14.3, 5067.0], [14.4, 5067.0], [14.5, 5067.0], [14.6, 5067.0], [14.7, 5067.0], [14.8, 5067.0], [14.9, 5067.0], [15.0, 5201.0], [15.1, 5201.0], [15.2, 5201.0], [15.3, 5201.0], [15.4, 5201.0], [15.5, 5201.0], [15.6, 5201.0], [15.7, 5201.0], [15.8, 5201.0], [15.9, 5201.0], [16.0, 5213.0], [16.1, 5213.0], [16.2, 5213.0], [16.3, 5213.0], [16.4, 5213.0], [16.5, 5213.0], [16.6, 5213.0], [16.7, 5213.0], [16.8, 5213.0], [16.9, 5213.0], [17.0, 5244.0], [17.1, 5244.0], [17.2, 5244.0], [17.3, 5244.0], [17.4, 5244.0], [17.5, 5244.0], [17.6, 5244.0], [17.7, 5244.0], [17.8, 5244.0], [17.9, 5244.0], [18.0, 5251.0], [18.1, 5251.0], [18.2, 5251.0], [18.3, 5251.0], [18.4, 5251.0], [18.5, 5251.0], [18.6, 5251.0], [18.7, 5251.0], [18.8, 5251.0], [18.9, 5251.0], [19.0, 5276.0], [19.1, 5276.0], [19.2, 5276.0], [19.3, 5276.0], [19.4, 5276.0], [19.5, 5276.0], [19.6, 5276.0], [19.7, 5276.0], [19.8, 5276.0], [19.9, 5276.0], [20.0, 5339.0], [20.1, 5339.0], [20.2, 5339.0], [20.3, 5339.0], [20.4, 5339.0], [20.5, 5339.0], [20.6, 5339.0], [20.7, 5339.0], [20.8, 5339.0], [20.9, 5339.0], [21.0, 5398.0], [21.1, 5398.0], [21.2, 5398.0], [21.3, 5398.0], [21.4, 5398.0], [21.5, 5398.0], [21.6, 5398.0], [21.7, 5398.0], [21.8, 5398.0], [21.9, 5398.0], [22.0, 5513.0], [22.1, 5513.0], [22.2, 5513.0], [22.3, 5513.0], [22.4, 5513.0], [22.5, 5513.0], [22.6, 5513.0], [22.7, 5513.0], [22.8, 5513.0], [22.9, 5513.0], [23.0, 5563.0], [23.1, 5563.0], [23.2, 5563.0], [23.3, 5563.0], [23.4, 5563.0], [23.5, 5563.0], [23.6, 5563.0], [23.7, 5563.0], [23.8, 5563.0], [23.9, 5563.0], [24.0, 5609.0], [24.1, 5609.0], [24.2, 5609.0], [24.3, 5609.0], [24.4, 5609.0], [24.5, 5609.0], [24.6, 5609.0], [24.7, 5609.0], [24.8, 5609.0], [24.9, 5609.0], [25.0, 5621.0], [25.1, 5621.0], [25.2, 5621.0], [25.3, 5621.0], [25.4, 5621.0], [25.5, 5621.0], [25.6, 5621.0], [25.7, 5621.0], [25.8, 5621.0], [25.9, 5621.0], [26.0, 5659.0], [26.1, 5659.0], [26.2, 5659.0], [26.3, 5659.0], [26.4, 5659.0], [26.5, 5659.0], [26.6, 5659.0], [26.7, 5659.0], [26.8, 5659.0], [26.9, 5659.0], [27.0, 5663.0], [27.1, 5663.0], [27.2, 5663.0], [27.3, 5663.0], [27.4, 5663.0], [27.5, 5663.0], [27.6, 5663.0], [27.7, 5663.0], [27.8, 5663.0], [27.9, 5663.0], [28.0, 5686.0], [28.1, 5686.0], [28.2, 5686.0], [28.3, 5686.0], [28.4, 5686.0], [28.5, 5686.0], [28.6, 5686.0], [28.7, 5686.0], [28.8, 5686.0], [28.9, 5686.0], [29.0, 5804.0], [29.1, 5804.0], [29.2, 5804.0], [29.3, 5804.0], [29.4, 5804.0], [29.5, 5804.0], [29.6, 5804.0], [29.7, 5804.0], [29.8, 5804.0], [29.9, 5804.0], [30.0, 5807.0], [30.1, 5807.0], [30.2, 5807.0], [30.3, 5807.0], [30.4, 5807.0], [30.5, 5807.0], [30.6, 5807.0], [30.7, 5807.0], [30.8, 5807.0], [30.9, 5807.0], [31.0, 5892.0], [31.1, 5892.0], [31.2, 5892.0], [31.3, 5892.0], [31.4, 5892.0], [31.5, 5892.0], [31.6, 5892.0], [31.7, 5892.0], [31.8, 5892.0], [31.9, 5892.0], [32.0, 5910.0], [32.1, 5910.0], [32.2, 5910.0], [32.3, 5910.0], [32.4, 5910.0], [32.5, 5910.0], [32.6, 5910.0], [32.7, 5910.0], [32.8, 5910.0], [32.9, 5910.0], [33.0, 5993.0], [33.1, 5993.0], [33.2, 5993.0], [33.3, 5993.0], [33.4, 5993.0], [33.5, 5993.0], [33.6, 5993.0], [33.7, 5993.0], [33.8, 5993.0], [33.9, 5993.0], [34.0, 6006.0], [34.1, 6006.0], [34.2, 6006.0], [34.3, 6006.0], [34.4, 6006.0], [34.5, 6006.0], [34.6, 6006.0], [34.7, 6006.0], [34.8, 6006.0], [34.9, 6006.0], [35.0, 6011.0], [35.1, 6011.0], [35.2, 6011.0], [35.3, 6011.0], [35.4, 6011.0], [35.5, 6011.0], [35.6, 6011.0], [35.7, 6011.0], [35.8, 6011.0], [35.9, 6011.0], [36.0, 6091.0], [36.1, 6091.0], [36.2, 6091.0], [36.3, 6091.0], [36.4, 6091.0], [36.5, 6091.0], [36.6, 6091.0], [36.7, 6091.0], [36.8, 6091.0], [36.9, 6091.0], [37.0, 6115.0], [37.1, 6115.0], [37.2, 6115.0], [37.3, 6115.0], [37.4, 6115.0], [37.5, 6115.0], [37.6, 6115.0], [37.7, 6115.0], [37.8, 6115.0], [37.9, 6115.0], [38.0, 6119.0], [38.1, 6119.0], [38.2, 6119.0], [38.3, 6119.0], [38.4, 6119.0], [38.5, 6119.0], [38.6, 6119.0], [38.7, 6119.0], [38.8, 6119.0], [38.9, 6119.0], [39.0, 6152.0], [39.1, 6152.0], [39.2, 6152.0], [39.3, 6152.0], [39.4, 6152.0], [39.5, 6152.0], [39.6, 6152.0], [39.7, 6152.0], [39.8, 6152.0], [39.9, 6152.0], [40.0, 6161.0], [40.1, 6161.0], [40.2, 6161.0], [40.3, 6161.0], [40.4, 6161.0], [40.5, 6161.0], [40.6, 6161.0], [40.7, 6161.0], [40.8, 6161.0], [40.9, 6161.0], [41.0, 6240.0], [41.1, 6240.0], [41.2, 6240.0], [41.3, 6240.0], [41.4, 6240.0], [41.5, 6240.0], [41.6, 6240.0], [41.7, 6240.0], [41.8, 6240.0], [41.9, 6240.0], [42.0, 6268.0], [42.1, 6268.0], [42.2, 6268.0], [42.3, 6268.0], [42.4, 6268.0], [42.5, 6268.0], [42.6, 6268.0], [42.7, 6268.0], [42.8, 6268.0], [42.9, 6268.0], [43.0, 6358.0], [43.1, 6358.0], [43.2, 6358.0], [43.3, 6358.0], [43.4, 6358.0], [43.5, 6358.0], [43.6, 6358.0], [43.7, 6358.0], [43.8, 6358.0], [43.9, 6358.0], [44.0, 6368.0], [44.1, 6368.0], [44.2, 6368.0], [44.3, 6368.0], [44.4, 6368.0], [44.5, 6368.0], [44.6, 6368.0], [44.7, 6368.0], [44.8, 6368.0], [44.9, 6368.0], [45.0, 6380.0], [45.1, 6380.0], [45.2, 6380.0], [45.3, 6380.0], [45.4, 6380.0], [45.5, 6380.0], [45.6, 6380.0], [45.7, 6380.0], [45.8, 6380.0], [45.9, 6380.0], [46.0, 6387.0], [46.1, 6387.0], [46.2, 6387.0], [46.3, 6387.0], [46.4, 6387.0], [46.5, 6387.0], [46.6, 6387.0], [46.7, 6387.0], [46.8, 6387.0], [46.9, 6387.0], [47.0, 6407.0], [47.1, 6407.0], [47.2, 6407.0], [47.3, 6407.0], [47.4, 6407.0], [47.5, 6407.0], [47.6, 6407.0], [47.7, 6407.0], [47.8, 6407.0], [47.9, 6407.0], [48.0, 6440.0], [48.1, 6440.0], [48.2, 6440.0], [48.3, 6440.0], [48.4, 6440.0], [48.5, 6440.0], [48.6, 6440.0], [48.7, 6440.0], [48.8, 6440.0], [48.9, 6440.0], [49.0, 6493.0], [49.1, 6493.0], [49.2, 6493.0], [49.3, 6493.0], [49.4, 6493.0], [49.5, 6493.0], [49.6, 6493.0], [49.7, 6493.0], [49.8, 6493.0], [49.9, 6493.0], [50.0, 6508.0], [50.1, 6508.0], [50.2, 6508.0], [50.3, 6508.0], [50.4, 6508.0], [50.5, 6508.0], [50.6, 6508.0], [50.7, 6508.0], [50.8, 6508.0], [50.9, 6508.0], [51.0, 6664.0], [51.1, 6664.0], [51.2, 6664.0], [51.3, 6664.0], [51.4, 6664.0], [51.5, 6664.0], [51.6, 6664.0], [51.7, 6664.0], [51.8, 6664.0], [51.9, 6664.0], [52.0, 6722.0], [52.1, 6722.0], [52.2, 6722.0], [52.3, 6722.0], [52.4, 6722.0], [52.5, 6722.0], [52.6, 6722.0], [52.7, 6722.0], [52.8, 6722.0], [52.9, 6722.0], [53.0, 6728.0], [53.1, 6728.0], [53.2, 6728.0], [53.3, 6728.0], [53.4, 6728.0], [53.5, 6728.0], [53.6, 6728.0], [53.7, 6728.0], [53.8, 6728.0], [53.9, 6728.0], [54.0, 6841.0], [54.1, 6841.0], [54.2, 6841.0], [54.3, 6841.0], [54.4, 6841.0], [54.5, 6841.0], [54.6, 6841.0], [54.7, 6841.0], [54.8, 6841.0], [54.9, 6841.0], [55.0, 6883.0], [55.1, 6883.0], [55.2, 6883.0], [55.3, 6883.0], [55.4, 6883.0], [55.5, 6883.0], [55.6, 6883.0], [55.7, 6883.0], [55.8, 6883.0], [55.9, 6883.0], [56.0, 6901.0], [56.1, 6901.0], [56.2, 6901.0], [56.3, 6901.0], [56.4, 6901.0], [56.5, 6901.0], [56.6, 6901.0], [56.7, 6901.0], [56.8, 6901.0], [56.9, 6901.0], [57.0, 6910.0], [57.1, 6910.0], [57.2, 6910.0], [57.3, 6910.0], [57.4, 6910.0], [57.5, 6910.0], [57.6, 6910.0], [57.7, 6910.0], [57.8, 6910.0], [57.9, 6910.0], [58.0, 6997.0], [58.1, 6997.0], [58.2, 6997.0], [58.3, 6997.0], [58.4, 6997.0], [58.5, 6997.0], [58.6, 6997.0], [58.7, 6997.0], [58.8, 6997.0], [58.9, 6997.0], [59.0, 7043.0], [59.1, 7043.0], [59.2, 7043.0], [59.3, 7043.0], [59.4, 7043.0], [59.5, 7043.0], [59.6, 7043.0], [59.7, 7043.0], [59.8, 7043.0], [59.9, 7043.0], [60.0, 7110.0], [60.1, 7110.0], [60.2, 7110.0], [60.3, 7110.0], [60.4, 7110.0], [60.5, 7110.0], [60.6, 7110.0], [60.7, 7110.0], [60.8, 7110.0], [60.9, 7110.0], [61.0, 7118.0], [61.1, 7118.0], [61.2, 7118.0], [61.3, 7118.0], [61.4, 7118.0], [61.5, 7118.0], [61.6, 7118.0], [61.7, 7118.0], [61.8, 7118.0], [61.9, 7118.0], [62.0, 7218.0], [62.1, 7218.0], [62.2, 7218.0], [62.3, 7218.0], [62.4, 7218.0], [62.5, 7218.0], [62.6, 7218.0], [62.7, 7218.0], [62.8, 7218.0], [62.9, 7218.0], [63.0, 7221.0], [63.1, 7221.0], [63.2, 7221.0], [63.3, 7221.0], [63.4, 7221.0], [63.5, 7221.0], [63.6, 7221.0], [63.7, 7221.0], [63.8, 7221.0], [63.9, 7221.0], [64.0, 7286.0], [64.1, 7286.0], [64.2, 7286.0], [64.3, 7286.0], [64.4, 7286.0], [64.5, 7286.0], [64.6, 7286.0], [64.7, 7286.0], [64.8, 7286.0], [64.9, 7286.0], [65.0, 7305.0], [65.1, 7305.0], [65.2, 7305.0], [65.3, 7305.0], [65.4, 7305.0], [65.5, 7305.0], [65.6, 7305.0], [65.7, 7305.0], [65.8, 7305.0], [65.9, 7305.0], [66.0, 7367.0], [66.1, 7367.0], [66.2, 7367.0], [66.3, 7367.0], [66.4, 7367.0], [66.5, 7367.0], [66.6, 7367.0], [66.7, 7367.0], [66.8, 7367.0], [66.9, 7367.0], [67.0, 7384.0], [67.1, 7384.0], [67.2, 7384.0], [67.3, 7384.0], [67.4, 7384.0], [67.5, 7384.0], [67.6, 7384.0], [67.7, 7384.0], [67.8, 7384.0], [67.9, 7384.0], [68.0, 7536.0], [68.1, 7536.0], [68.2, 7536.0], [68.3, 7536.0], [68.4, 7536.0], [68.5, 7536.0], [68.6, 7536.0], [68.7, 7536.0], [68.8, 7536.0], [68.9, 7536.0], [69.0, 7562.0], [69.1, 7562.0], [69.2, 7562.0], [69.3, 7562.0], [69.4, 7562.0], [69.5, 7562.0], [69.6, 7562.0], [69.7, 7562.0], [69.8, 7562.0], [69.9, 7562.0], [70.0, 7649.0], [70.1, 7649.0], [70.2, 7649.0], [70.3, 7649.0], [70.4, 7649.0], [70.5, 7649.0], [70.6, 7649.0], [70.7, 7649.0], [70.8, 7649.0], [70.9, 7649.0], [71.0, 7669.0], [71.1, 7669.0], [71.2, 7669.0], [71.3, 7669.0], [71.4, 7669.0], [71.5, 7669.0], [71.6, 7669.0], [71.7, 7669.0], [71.8, 7669.0], [71.9, 7669.0], [72.0, 7676.0], [72.1, 7676.0], [72.2, 7676.0], [72.3, 7676.0], [72.4, 7676.0], [72.5, 7676.0], [72.6, 7676.0], [72.7, 7676.0], [72.8, 7676.0], [72.9, 7676.0], [73.0, 7703.0], [73.1, 7703.0], [73.2, 7703.0], [73.3, 7703.0], [73.4, 7703.0], [73.5, 7703.0], [73.6, 7703.0], [73.7, 7703.0], [73.8, 7703.0], [73.9, 7703.0], [74.0, 7725.0], [74.1, 7725.0], [74.2, 7725.0], [74.3, 7725.0], [74.4, 7725.0], [74.5, 7725.0], [74.6, 7725.0], [74.7, 7725.0], [74.8, 7725.0], [74.9, 7725.0], [75.0, 7768.0], [75.1, 7768.0], [75.2, 7768.0], [75.3, 7768.0], [75.4, 7768.0], [75.5, 7768.0], [75.6, 7768.0], [75.7, 7768.0], [75.8, 7768.0], [75.9, 7768.0], [76.0, 7847.0], [76.1, 7847.0], [76.2, 7847.0], [76.3, 7847.0], [76.4, 7847.0], [76.5, 7847.0], [76.6, 7847.0], [76.7, 7847.0], [76.8, 7847.0], [76.9, 7847.0], [77.0, 7850.0], [77.1, 7850.0], [77.2, 7850.0], [77.3, 7850.0], [77.4, 7850.0], [77.5, 7850.0], [77.6, 7850.0], [77.7, 7850.0], [77.8, 7850.0], [77.9, 7850.0], [78.0, 7891.0], [78.1, 7891.0], [78.2, 7891.0], [78.3, 7891.0], [78.4, 7891.0], [78.5, 7891.0], [78.6, 7891.0], [78.7, 7891.0], [78.8, 7891.0], [78.9, 7891.0], [79.0, 7911.0], [79.1, 7911.0], [79.2, 7911.0], [79.3, 7911.0], [79.4, 7911.0], [79.5, 7911.0], [79.6, 7911.0], [79.7, 7911.0], [79.8, 7911.0], [79.9, 7911.0], [80.0, 8063.0], [80.1, 8063.0], [80.2, 8063.0], [80.3, 8063.0], [80.4, 8063.0], [80.5, 8063.0], [80.6, 8063.0], [80.7, 8063.0], [80.8, 8063.0], [80.9, 8063.0], [81.0, 8123.0], [81.1, 8123.0], [81.2, 8123.0], [81.3, 8123.0], [81.4, 8123.0], [81.5, 8123.0], [81.6, 8123.0], [81.7, 8123.0], [81.8, 8123.0], [81.9, 8123.0], [82.0, 8158.0], [82.1, 8158.0], [82.2, 8158.0], [82.3, 8158.0], [82.4, 8158.0], [82.5, 8158.0], [82.6, 8158.0], [82.7, 8158.0], [82.8, 8158.0], [82.9, 8158.0], [83.0, 8286.0], [83.1, 8286.0], [83.2, 8286.0], [83.3, 8286.0], [83.4, 8286.0], [83.5, 8286.0], [83.6, 8286.0], [83.7, 8286.0], [83.8, 8286.0], [83.9, 8286.0], [84.0, 8355.0], [84.1, 8355.0], [84.2, 8355.0], [84.3, 8355.0], [84.4, 8355.0], [84.5, 8355.0], [84.6, 8355.0], [84.7, 8355.0], [84.8, 8355.0], [84.9, 8355.0], [85.0, 8356.0], [85.1, 8356.0], [85.2, 8356.0], [85.3, 8356.0], [85.4, 8356.0], [85.5, 8356.0], [85.6, 8356.0], [85.7, 8356.0], [85.8, 8356.0], [85.9, 8356.0], [86.0, 8412.0], [86.1, 8412.0], [86.2, 8412.0], [86.3, 8412.0], [86.4, 8412.0], [86.5, 8412.0], [86.6, 8412.0], [86.7, 8412.0], [86.8, 8412.0], [86.9, 8412.0], [87.0, 8460.0], [87.1, 8460.0], [87.2, 8460.0], [87.3, 8460.0], [87.4, 8460.0], [87.5, 8460.0], [87.6, 8460.0], [87.7, 8460.0], [87.8, 8460.0], [87.9, 8460.0], [88.0, 8644.0], [88.1, 8644.0], [88.2, 8644.0], [88.3, 8644.0], [88.4, 8644.0], [88.5, 8644.0], [88.6, 8644.0], [88.7, 8644.0], [88.8, 8644.0], [88.9, 8644.0], [89.0, 8724.0], [89.1, 8724.0], [89.2, 8724.0], [89.3, 8724.0], [89.4, 8724.0], [89.5, 8724.0], [89.6, 8724.0], [89.7, 8724.0], [89.8, 8724.0], [89.9, 8724.0], [90.0, 8785.0], [90.1, 8785.0], [90.2, 8785.0], [90.3, 8785.0], [90.4, 8785.0], [90.5, 8785.0], [90.6, 8785.0], [90.7, 8785.0], [90.8, 8785.0], [90.9, 8785.0], [91.0, 8799.0], [91.1, 8799.0], [91.2, 8799.0], [91.3, 8799.0], [91.4, 8799.0], [91.5, 8799.0], [91.6, 8799.0], [91.7, 8799.0], [91.8, 8799.0], [91.9, 8799.0], [92.0, 8990.0], [92.1, 8990.0], [92.2, 8990.0], [92.3, 8990.0], [92.4, 8990.0], [92.5, 8990.0], [92.6, 8990.0], [92.7, 8990.0], [92.8, 8990.0], [92.9, 8990.0], [93.0, 9426.0], [93.1, 9426.0], [93.2, 9426.0], [93.3, 9426.0], [93.4, 9426.0], [93.5, 9426.0], [93.6, 9426.0], [93.7, 9426.0], [93.8, 9426.0], [93.9, 9426.0], [94.0, 9434.0], [94.1, 9434.0], [94.2, 9434.0], [94.3, 9434.0], [94.4, 9434.0], [94.5, 9434.0], [94.6, 9434.0], [94.7, 9434.0], [94.8, 9434.0], [94.9, 9434.0], [95.0, 9855.0], [95.1, 9855.0], [95.2, 9855.0], [95.3, 9855.0], [95.4, 9855.0], [95.5, 9855.0], [95.6, 9855.0], [95.7, 9855.0], [95.8, 9855.0], [95.9, 9855.0], [96.0, 10075.0], [96.1, 10075.0], [96.2, 10075.0], [96.3, 10075.0], [96.4, 10075.0], [96.5, 10075.0], [96.6, 10075.0], [96.7, 10075.0], [96.8, 10075.0], [96.9, 10075.0], [97.0, 10352.0], [97.1, 10352.0], [97.2, 10352.0], [97.3, 10352.0], [97.4, 10352.0], [97.5, 10352.0], [97.6, 10352.0], [97.7, 10352.0], [97.8, 10352.0], [97.9, 10352.0], [98.0, 10492.0], [98.1, 10492.0], [98.2, 10492.0], [98.3, 10492.0], [98.4, 10492.0], [98.5, 10492.0], [98.6, 10492.0], [98.7, 10492.0], [98.8, 10492.0], [98.9, 10492.0], [99.0, 10867.0], [99.1, 10867.0], [99.2, 10867.0], [99.3, 10867.0], [99.4, 10867.0], [99.5, 10867.0], [99.6, 10867.0], [99.7, 10867.0], [99.8, 10867.0], [99.9, 10867.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 519.0], [0.1, 519.0], [0.2, 519.0], [0.3, 519.0], [0.4, 519.0], [0.5, 519.0], [0.6, 519.0], [0.7, 519.0], [0.8, 519.0], [0.9, 519.0], [1.0, 523.0], [1.1, 523.0], [1.2, 523.0], [1.3, 523.0], [1.4, 523.0], [1.5, 523.0], [1.6, 523.0], [1.7, 523.0], [1.8, 523.0], [1.9, 523.0], [2.0, 532.0], [2.1, 532.0], [2.2, 532.0], [2.3, 532.0], [2.4, 532.0], [2.5, 532.0], [2.6, 532.0], [2.7, 532.0], [2.8, 532.0], [2.9, 532.0], [3.0, 533.0], [3.1, 533.0], [3.2, 533.0], [3.3, 533.0], [3.4, 533.0], [3.5, 533.0], [3.6, 533.0], [3.7, 533.0], [3.8, 533.0], [3.9, 533.0], [4.0, 535.0], [4.1, 535.0], [4.2, 535.0], [4.3, 535.0], [4.4, 535.0], [4.5, 535.0], [4.6, 535.0], [4.7, 535.0], [4.8, 535.0], [4.9, 535.0], [5.0, 536.0], [5.1, 536.0], [5.2, 536.0], [5.3, 536.0], [5.4, 536.0], [5.5, 536.0], [5.6, 536.0], [5.7, 536.0], [5.8, 536.0], [5.9, 536.0], [6.0, 536.0], [6.1, 536.0], [6.2, 536.0], [6.3, 536.0], [6.4, 536.0], [6.5, 536.0], [6.6, 536.0], [6.7, 536.0], [6.8, 536.0], [6.9, 536.0], [7.0, 537.0], [7.1, 537.0], [7.2, 537.0], [7.3, 537.0], [7.4, 537.0], [7.5, 537.0], [7.6, 537.0], [7.7, 537.0], [7.8, 537.0], [7.9, 537.0], [8.0, 537.0], [8.1, 537.0], [8.2, 537.0], [8.3, 537.0], [8.4, 537.0], [8.5, 537.0], [8.6, 537.0], [8.7, 537.0], [8.8, 537.0], [8.9, 537.0], [9.0, 537.0], [9.1, 537.0], [9.2, 537.0], [9.3, 537.0], [9.4, 537.0], [9.5, 537.0], [9.6, 537.0], [9.7, 537.0], [9.8, 537.0], [9.9, 537.0], [10.0, 538.0], [10.1, 538.0], [10.2, 538.0], [10.3, 538.0], [10.4, 538.0], [10.5, 538.0], [10.6, 538.0], [10.7, 538.0], [10.8, 538.0], [10.9, 538.0], [11.0, 539.0], [11.1, 539.0], [11.2, 539.0], [11.3, 539.0], [11.4, 539.0], [11.5, 539.0], [11.6, 539.0], [11.7, 539.0], [11.8, 539.0], [11.9, 539.0], [12.0, 539.0], [12.1, 539.0], [12.2, 539.0], [12.3, 539.0], [12.4, 539.0], [12.5, 539.0], [12.6, 539.0], [12.7, 539.0], [12.8, 539.0], [12.9, 539.0], [13.0, 540.0], [13.1, 540.0], [13.2, 540.0], [13.3, 540.0], [13.4, 540.0], [13.5, 540.0], [13.6, 540.0], [13.7, 540.0], [13.8, 540.0], [13.9, 540.0], [14.0, 541.0], [14.1, 541.0], [14.2, 541.0], [14.3, 541.0], [14.4, 541.0], [14.5, 541.0], [14.6, 541.0], [14.7, 541.0], [14.8, 541.0], [14.9, 541.0], [15.0, 541.0], [15.1, 541.0], [15.2, 541.0], [15.3, 541.0], [15.4, 541.0], [15.5, 541.0], [15.6, 541.0], [15.7, 541.0], [15.8, 541.0], [15.9, 541.0], [16.0, 541.0], [16.1, 541.0], [16.2, 541.0], [16.3, 541.0], [16.4, 541.0], [16.5, 541.0], [16.6, 541.0], [16.7, 541.0], [16.8, 541.0], [16.9, 541.0], [17.0, 542.0], [17.1, 542.0], [17.2, 542.0], [17.3, 542.0], [17.4, 542.0], [17.5, 542.0], [17.6, 542.0], [17.7, 542.0], [17.8, 542.0], [17.9, 542.0], [18.0, 542.0], [18.1, 542.0], [18.2, 542.0], [18.3, 542.0], [18.4, 542.0], [18.5, 542.0], [18.6, 542.0], [18.7, 542.0], [18.8, 542.0], [18.9, 542.0], [19.0, 542.0], [19.1, 542.0], [19.2, 542.0], [19.3, 542.0], [19.4, 542.0], [19.5, 542.0], [19.6, 542.0], [19.7, 542.0], [19.8, 542.0], [19.9, 542.0], [20.0, 547.0], [20.1, 547.0], [20.2, 547.0], [20.3, 547.0], [20.4, 547.0], [20.5, 547.0], [20.6, 547.0], [20.7, 547.0], [20.8, 547.0], [20.9, 547.0], [21.0, 553.0], [21.1, 553.0], [21.2, 553.0], [21.3, 553.0], [21.4, 553.0], [21.5, 553.0], [21.6, 553.0], [21.7, 553.0], [21.8, 553.0], [21.9, 553.0], [22.0, 557.0], [22.1, 557.0], [22.2, 557.0], [22.3, 557.0], [22.4, 557.0], [22.5, 557.0], [22.6, 557.0], [22.7, 557.0], [22.8, 557.0], [22.9, 557.0], [23.0, 558.0], [23.1, 558.0], [23.2, 558.0], [23.3, 558.0], [23.4, 558.0], [23.5, 558.0], [23.6, 558.0], [23.7, 558.0], [23.8, 558.0], [23.9, 558.0], [24.0, 559.0], [24.1, 559.0], [24.2, 559.0], [24.3, 559.0], [24.4, 559.0], [24.5, 559.0], [24.6, 559.0], [24.7, 559.0], [24.8, 559.0], [24.9, 559.0], [25.0, 559.0], [25.1, 559.0], [25.2, 559.0], [25.3, 559.0], [25.4, 559.0], [25.5, 559.0], [25.6, 559.0], [25.7, 559.0], [25.8, 559.0], [25.9, 559.0], [26.0, 559.0], [26.1, 559.0], [26.2, 559.0], [26.3, 559.0], [26.4, 559.0], [26.5, 559.0], [26.6, 559.0], [26.7, 559.0], [26.8, 559.0], [26.9, 559.0], [27.0, 560.0], [27.1, 560.0], [27.2, 560.0], [27.3, 560.0], [27.4, 560.0], [27.5, 560.0], [27.6, 560.0], [27.7, 560.0], [27.8, 560.0], [27.9, 560.0], [28.0, 561.0], [28.1, 561.0], [28.2, 561.0], [28.3, 561.0], [28.4, 561.0], [28.5, 561.0], [28.6, 561.0], [28.7, 561.0], [28.8, 561.0], [28.9, 561.0], [29.0, 561.0], [29.1, 561.0], [29.2, 561.0], [29.3, 561.0], [29.4, 561.0], [29.5, 561.0], [29.6, 561.0], [29.7, 561.0], [29.8, 561.0], [29.9, 561.0], [30.0, 562.0], [30.1, 562.0], [30.2, 562.0], [30.3, 562.0], [30.4, 562.0], [30.5, 562.0], [30.6, 562.0], [30.7, 562.0], [30.8, 562.0], [30.9, 562.0], [31.0, 563.0], [31.1, 563.0], [31.2, 563.0], [31.3, 563.0], [31.4, 563.0], [31.5, 563.0], [31.6, 563.0], [31.7, 563.0], [31.8, 563.0], [31.9, 563.0], [32.0, 563.0], [32.1, 563.0], [32.2, 563.0], [32.3, 563.0], [32.4, 563.0], [32.5, 563.0], [32.6, 563.0], [32.7, 563.0], [32.8, 563.0], [32.9, 563.0], [33.0, 563.0], [33.1, 563.0], [33.2, 563.0], [33.3, 563.0], [33.4, 563.0], [33.5, 563.0], [33.6, 563.0], [33.7, 563.0], [33.8, 563.0], [33.9, 563.0], [34.0, 564.0], [34.1, 564.0], [34.2, 564.0], [34.3, 564.0], [34.4, 564.0], [34.5, 564.0], [34.6, 564.0], [34.7, 564.0], [34.8, 564.0], [34.9, 564.0], [35.0, 565.0], [35.1, 565.0], [35.2, 565.0], [35.3, 565.0], [35.4, 565.0], [35.5, 565.0], [35.6, 565.0], [35.7, 565.0], [35.8, 565.0], [35.9, 565.0], [36.0, 565.0], [36.1, 565.0], [36.2, 565.0], [36.3, 565.0], [36.4, 565.0], [36.5, 565.0], [36.6, 565.0], [36.7, 565.0], [36.8, 565.0], [36.9, 565.0], [37.0, 565.0], [37.1, 565.0], [37.2, 565.0], [37.3, 565.0], [37.4, 565.0], [37.5, 565.0], [37.6, 565.0], [37.7, 565.0], [37.8, 565.0], [37.9, 565.0], [38.0, 565.0], [38.1, 565.0], [38.2, 565.0], [38.3, 565.0], [38.4, 565.0], [38.5, 565.0], [38.6, 565.0], [38.7, 565.0], [38.8, 565.0], [38.9, 565.0], [39.0, 566.0], [39.1, 566.0], [39.2, 566.0], [39.3, 566.0], [39.4, 566.0], [39.5, 566.0], [39.6, 566.0], [39.7, 566.0], [39.8, 566.0], [39.9, 566.0], [40.0, 567.0], [40.1, 567.0], [40.2, 567.0], [40.3, 567.0], [40.4, 567.0], [40.5, 567.0], [40.6, 567.0], [40.7, 567.0], [40.8, 567.0], [40.9, 567.0], [41.0, 568.0], [41.1, 568.0], [41.2, 568.0], [41.3, 568.0], [41.4, 568.0], [41.5, 568.0], [41.6, 568.0], [41.7, 568.0], [41.8, 568.0], [41.9, 568.0], [42.0, 568.0], [42.1, 568.0], [42.2, 568.0], [42.3, 568.0], [42.4, 568.0], [42.5, 568.0], [42.6, 568.0], [42.7, 568.0], [42.8, 568.0], [42.9, 568.0], [43.0, 570.0], [43.1, 570.0], [43.2, 570.0], [43.3, 570.0], [43.4, 570.0], [43.5, 570.0], [43.6, 570.0], [43.7, 570.0], [43.8, 570.0], [43.9, 570.0], [44.0, 571.0], [44.1, 571.0], [44.2, 571.0], [44.3, 571.0], [44.4, 571.0], [44.5, 571.0], [44.6, 571.0], [44.7, 571.0], [44.8, 571.0], [44.9, 571.0], [45.0, 573.0], [45.1, 573.0], [45.2, 573.0], [45.3, 573.0], [45.4, 573.0], [45.5, 573.0], [45.6, 573.0], [45.7, 573.0], [45.8, 573.0], [45.9, 573.0], [46.0, 573.0], [46.1, 573.0], [46.2, 573.0], [46.3, 573.0], [46.4, 573.0], [46.5, 573.0], [46.6, 573.0], [46.7, 573.0], [46.8, 573.0], [46.9, 573.0], [47.0, 583.0], [47.1, 583.0], [47.2, 583.0], [47.3, 583.0], [47.4, 583.0], [47.5, 583.0], [47.6, 583.0], [47.7, 583.0], [47.8, 583.0], [47.9, 583.0], [48.0, 585.0], [48.1, 585.0], [48.2, 585.0], [48.3, 585.0], [48.4, 585.0], [48.5, 585.0], [48.6, 585.0], [48.7, 585.0], [48.8, 585.0], [48.9, 585.0], [49.0, 585.0], [49.1, 585.0], [49.2, 585.0], [49.3, 585.0], [49.4, 585.0], [49.5, 585.0], [49.6, 585.0], [49.7, 585.0], [49.8, 585.0], [49.9, 585.0], [50.0, 585.0], [50.1, 585.0], [50.2, 585.0], [50.3, 585.0], [50.4, 585.0], [50.5, 585.0], [50.6, 585.0], [50.7, 585.0], [50.8, 585.0], [50.9, 585.0], [51.0, 586.0], [51.1, 586.0], [51.2, 586.0], [51.3, 586.0], [51.4, 586.0], [51.5, 586.0], [51.6, 586.0], [51.7, 586.0], [51.8, 586.0], [51.9, 586.0], [52.0, 586.0], [52.1, 586.0], [52.2, 586.0], [52.3, 586.0], [52.4, 586.0], [52.5, 586.0], [52.6, 586.0], [52.7, 586.0], [52.8, 586.0], [52.9, 586.0], [53.0, 587.0], [53.1, 587.0], [53.2, 587.0], [53.3, 587.0], [53.4, 587.0], [53.5, 587.0], [53.6, 587.0], [53.7, 587.0], [53.8, 587.0], [53.9, 587.0], [54.0, 588.0], [54.1, 588.0], [54.2, 588.0], [54.3, 588.0], [54.4, 588.0], [54.5, 588.0], [54.6, 588.0], [54.7, 588.0], [54.8, 588.0], [54.9, 588.0], [55.0, 589.0], [55.1, 589.0], [55.2, 589.0], [55.3, 589.0], [55.4, 589.0], [55.5, 589.0], [55.6, 589.0], [55.7, 589.0], [55.8, 589.0], [55.9, 589.0], [56.0, 590.0], [56.1, 590.0], [56.2, 590.0], [56.3, 590.0], [56.4, 590.0], [56.5, 590.0], [56.6, 590.0], [56.7, 590.0], [56.8, 590.0], [56.9, 590.0], [57.0, 590.0], [57.1, 590.0], [57.2, 590.0], [57.3, 590.0], [57.4, 590.0], [57.5, 590.0], [57.6, 590.0], [57.7, 590.0], [57.8, 590.0], [57.9, 590.0], [58.0, 591.0], [58.1, 591.0], [58.2, 591.0], [58.3, 591.0], [58.4, 591.0], [58.5, 591.0], [58.6, 591.0], [58.7, 591.0], [58.8, 591.0], [58.9, 591.0], [59.0, 592.0], [59.1, 592.0], [59.2, 592.0], [59.3, 592.0], [59.4, 592.0], [59.5, 592.0], [59.6, 592.0], [59.7, 592.0], [59.8, 592.0], [59.9, 592.0], [60.0, 592.0], [60.1, 592.0], [60.2, 592.0], [60.3, 592.0], [60.4, 592.0], [60.5, 592.0], [60.6, 592.0], [60.7, 592.0], [60.8, 592.0], [60.9, 592.0], [61.0, 592.0], [61.1, 592.0], [61.2, 592.0], [61.3, 592.0], [61.4, 592.0], [61.5, 592.0], [61.6, 592.0], [61.7, 592.0], [61.8, 592.0], [61.9, 592.0], [62.0, 593.0], [62.1, 593.0], [62.2, 593.0], [62.3, 593.0], [62.4, 593.0], [62.5, 593.0], [62.6, 593.0], [62.7, 593.0], [62.8, 593.0], [62.9, 593.0], [63.0, 593.0], [63.1, 593.0], [63.2, 593.0], [63.3, 593.0], [63.4, 593.0], [63.5, 593.0], [63.6, 593.0], [63.7, 593.0], [63.8, 593.0], [63.9, 593.0], [64.0, 594.0], [64.1, 594.0], [64.2, 594.0], [64.3, 594.0], [64.4, 594.0], [64.5, 594.0], [64.6, 594.0], [64.7, 594.0], [64.8, 594.0], [64.9, 594.0], [65.0, 594.0], [65.1, 594.0], [65.2, 594.0], [65.3, 594.0], [65.4, 594.0], [65.5, 594.0], [65.6, 594.0], [65.7, 594.0], [65.8, 594.0], [65.9, 594.0], [66.0, 596.0], [66.1, 596.0], [66.2, 596.0], [66.3, 596.0], [66.4, 596.0], [66.5, 596.0], [66.6, 596.0], [66.7, 596.0], [66.8, 596.0], [66.9, 596.0], [67.0, 601.0], [67.1, 601.0], [67.2, 601.0], [67.3, 601.0], [67.4, 601.0], [67.5, 601.0], [67.6, 601.0], [67.7, 601.0], [67.8, 601.0], [67.9, 601.0], [68.0, 602.0], [68.1, 602.0], [68.2, 602.0], [68.3, 602.0], [68.4, 602.0], [68.5, 602.0], [68.6, 602.0], [68.7, 602.0], [68.8, 602.0], [68.9, 602.0], [69.0, 603.0], [69.1, 603.0], [69.2, 603.0], [69.3, 603.0], [69.4, 603.0], [69.5, 603.0], [69.6, 603.0], [69.7, 603.0], [69.8, 603.0], [69.9, 603.0], [70.0, 605.0], [70.1, 605.0], [70.2, 605.0], [70.3, 605.0], [70.4, 605.0], [70.5, 605.0], [70.6, 605.0], [70.7, 605.0], [70.8, 605.0], [70.9, 605.0], [71.0, 607.0], [71.1, 607.0], [71.2, 607.0], [71.3, 607.0], [71.4, 607.0], [71.5, 607.0], [71.6, 607.0], [71.7, 607.0], [71.8, 607.0], [71.9, 607.0], [72.0, 611.0], [72.1, 611.0], [72.2, 611.0], [72.3, 611.0], [72.4, 611.0], [72.5, 611.0], [72.6, 611.0], [72.7, 611.0], [72.8, 611.0], [72.9, 611.0], [73.0, 611.0], [73.1, 611.0], [73.2, 611.0], [73.3, 611.0], [73.4, 611.0], [73.5, 611.0], [73.6, 611.0], [73.7, 611.0], [73.8, 611.0], [73.9, 611.0], [74.0, 611.0], [74.1, 611.0], [74.2, 611.0], [74.3, 611.0], [74.4, 611.0], [74.5, 611.0], [74.6, 611.0], [74.7, 611.0], [74.8, 611.0], [74.9, 611.0], [75.0, 612.0], [75.1, 612.0], [75.2, 612.0], [75.3, 612.0], [75.4, 612.0], [75.5, 612.0], [75.6, 612.0], [75.7, 612.0], [75.8, 612.0], [75.9, 612.0], [76.0, 613.0], [76.1, 613.0], [76.2, 613.0], [76.3, 613.0], [76.4, 613.0], [76.5, 613.0], [76.6, 613.0], [76.7, 613.0], [76.8, 613.0], [76.9, 613.0], [77.0, 613.0], [77.1, 613.0], [77.2, 613.0], [77.3, 613.0], [77.4, 613.0], [77.5, 613.0], [77.6, 613.0], [77.7, 613.0], [77.8, 613.0], [77.9, 613.0], [78.0, 613.0], [78.1, 613.0], [78.2, 613.0], [78.3, 613.0], [78.4, 613.0], [78.5, 613.0], [78.6, 613.0], [78.7, 613.0], [78.8, 613.0], [78.9, 613.0], [79.0, 614.0], [79.1, 614.0], [79.2, 614.0], [79.3, 614.0], [79.4, 614.0], [79.5, 614.0], [79.6, 614.0], [79.7, 614.0], [79.8, 614.0], [79.9, 614.0], [80.0, 614.0], [80.1, 614.0], [80.2, 614.0], [80.3, 614.0], [80.4, 614.0], [80.5, 614.0], [80.6, 614.0], [80.7, 614.0], [80.8, 614.0], [80.9, 614.0], [81.0, 614.0], [81.1, 614.0], [81.2, 614.0], [81.3, 614.0], [81.4, 614.0], [81.5, 614.0], [81.6, 614.0], [81.7, 614.0], [81.8, 614.0], [81.9, 614.0], [82.0, 616.0], [82.1, 616.0], [82.2, 616.0], [82.3, 616.0], [82.4, 616.0], [82.5, 616.0], [82.6, 616.0], [82.7, 616.0], [82.8, 616.0], [82.9, 616.0], [83.0, 616.0], [83.1, 616.0], [83.2, 616.0], [83.3, 616.0], [83.4, 616.0], [83.5, 616.0], [83.6, 616.0], [83.7, 616.0], [83.8, 616.0], [83.9, 616.0], [84.0, 616.0], [84.1, 616.0], [84.2, 616.0], [84.3, 616.0], [84.4, 616.0], [84.5, 616.0], [84.6, 616.0], [84.7, 616.0], [84.8, 616.0], [84.9, 616.0], [85.0, 616.0], [85.1, 616.0], [85.2, 616.0], [85.3, 616.0], [85.4, 616.0], [85.5, 616.0], [85.6, 616.0], [85.7, 616.0], [85.8, 616.0], [85.9, 616.0], [86.0, 617.0], [86.1, 617.0], [86.2, 617.0], [86.3, 617.0], [86.4, 617.0], [86.5, 617.0], [86.6, 617.0], [86.7, 617.0], [86.8, 617.0], [86.9, 617.0], [87.0, 617.0], [87.1, 617.0], [87.2, 617.0], [87.3, 617.0], [87.4, 617.0], [87.5, 617.0], [87.6, 617.0], [87.7, 617.0], [87.8, 617.0], [87.9, 617.0], [88.0, 617.0], [88.1, 617.0], [88.2, 617.0], [88.3, 617.0], [88.4, 617.0], [88.5, 617.0], [88.6, 617.0], [88.7, 617.0], [88.8, 617.0], [88.9, 617.0], [89.0, 618.0], [89.1, 618.0], [89.2, 618.0], [89.3, 618.0], [89.4, 618.0], [89.5, 618.0], [89.6, 618.0], [89.7, 618.0], [89.8, 618.0], [89.9, 618.0], [90.0, 619.0], [90.1, 619.0], [90.2, 619.0], [90.3, 619.0], [90.4, 619.0], [90.5, 619.0], [90.6, 619.0], [90.7, 619.0], [90.8, 619.0], [90.9, 619.0], [91.0, 619.0], [91.1, 619.0], [91.2, 619.0], [91.3, 619.0], [91.4, 619.0], [91.5, 619.0], [91.6, 619.0], [91.7, 619.0], [91.8, 619.0], [91.9, 619.0], [92.0, 622.0], [92.1, 622.0], [92.2, 622.0], [92.3, 622.0], [92.4, 622.0], [92.5, 622.0], [92.6, 622.0], [92.7, 622.0], [92.8, 622.0], [92.9, 622.0], [93.0, 623.0], [93.1, 623.0], [93.2, 623.0], [93.3, 623.0], [93.4, 623.0], [93.5, 623.0], [93.6, 623.0], [93.7, 623.0], [93.8, 623.0], [93.9, 623.0], [94.0, 626.0], [94.1, 626.0], [94.2, 626.0], [94.3, 626.0], [94.4, 626.0], [94.5, 626.0], [94.6, 626.0], [94.7, 626.0], [94.8, 626.0], [94.9, 626.0], [95.0, 632.0], [95.1, 632.0], [95.2, 632.0], [95.3, 632.0], [95.4, 632.0], [95.5, 632.0], [95.6, 632.0], [95.7, 632.0], [95.8, 632.0], [95.9, 632.0], [96.0, 633.0], [96.1, 633.0], [96.2, 633.0], [96.3, 633.0], [96.4, 633.0], [96.5, 633.0], [96.6, 633.0], [96.7, 633.0], [96.8, 633.0], [96.9, 633.0], [97.0, 637.0], [97.1, 637.0], [97.2, 637.0], [97.3, 637.0], [97.4, 637.0], [97.5, 637.0], [97.6, 637.0], [97.7, 637.0], [97.8, 637.0], [97.9, 637.0], [98.0, 638.0], [98.1, 638.0], [98.2, 638.0], [98.3, 638.0], [98.4, 638.0], [98.5, 638.0], [98.6, 638.0], [98.7, 638.0], [98.8, 638.0], [98.9, 638.0], [99.0, 639.0], [99.1, 639.0], [99.2, 639.0], [99.3, 639.0], [99.4, 639.0], [99.5, 639.0], [99.6, 639.0], [99.7, 639.0], [99.8, 639.0], [99.9, 639.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 4327.0], [0.1, 4327.0], [0.2, 4327.0], [0.3, 4327.0], [0.4, 4327.0], [0.5, 4327.0], [0.6, 4327.0], [0.7, 4327.0], [0.8, 4327.0], [0.9, 4327.0], [1.0, 4582.0], [1.1, 4582.0], [1.2, 4582.0], [1.3, 4582.0], [1.4, 4582.0], [1.5, 4582.0], [1.6, 4582.0], [1.7, 4582.0], [1.8, 4582.0], [1.9, 4582.0], [2.0, 4873.0], [2.1, 4873.0], [2.2, 4873.0], [2.3, 4873.0], [2.4, 4873.0], [2.5, 4873.0], [2.6, 4873.0], [2.7, 4873.0], [2.8, 4873.0], [2.9, 4873.0], [3.0, 4908.0], [3.1, 4908.0], [3.2, 4908.0], [3.3, 4908.0], [3.4, 4908.0], [3.5, 4908.0], [3.6, 4908.0], [3.7, 4908.0], [3.8, 4908.0], [3.9, 4908.0], [4.0, 5085.0], [4.1, 5085.0], [4.2, 5085.0], [4.3, 5085.0], [4.4, 5085.0], [4.5, 5085.0], [4.6, 5085.0], [4.7, 5085.0], [4.8, 5085.0], [4.9, 5085.0], [5.0, 5112.0], [5.1, 5112.0], [5.2, 5112.0], [5.3, 5112.0], [5.4, 5112.0], [5.5, 5112.0], [5.6, 5112.0], [5.7, 5112.0], [5.8, 5112.0], [5.9, 5112.0], [6.0, 5166.0], [6.1, 5166.0], [6.2, 5166.0], [6.3, 5166.0], [6.4, 5166.0], [6.5, 5166.0], [6.6, 5166.0], [6.7, 5166.0], [6.8, 5166.0], [6.9, 5166.0], [7.0, 5206.0], [7.1, 5206.0], [7.2, 5206.0], [7.3, 5206.0], [7.4, 5206.0], [7.5, 5206.0], [7.6, 5206.0], [7.7, 5206.0], [7.8, 5206.0], [7.9, 5206.0], [8.0, 5263.0], [8.1, 5263.0], [8.2, 5263.0], [8.3, 5263.0], [8.4, 5263.0], [8.5, 5263.0], [8.6, 5263.0], [8.7, 5263.0], [8.8, 5263.0], [8.9, 5263.0], [9.0, 5529.0], [9.1, 5529.0], [9.2, 5529.0], [9.3, 5529.0], [9.4, 5529.0], [9.5, 5529.0], [9.6, 5529.0], [9.7, 5529.0], [9.8, 5529.0], [9.9, 5529.0], [10.0, 5546.0], [10.1, 5546.0], [10.2, 5546.0], [10.3, 5546.0], [10.4, 5546.0], [10.5, 5546.0], [10.6, 5546.0], [10.7, 5546.0], [10.8, 5546.0], [10.9, 5546.0], [11.0, 5561.0], [11.1, 5561.0], [11.2, 5561.0], [11.3, 5561.0], [11.4, 5561.0], [11.5, 5561.0], [11.6, 5561.0], [11.7, 5561.0], [11.8, 5561.0], [11.9, 5561.0], [12.0, 5569.0], [12.1, 5569.0], [12.2, 5569.0], [12.3, 5569.0], [12.4, 5569.0], [12.5, 5569.0], [12.6, 5569.0], [12.7, 5569.0], [12.8, 5569.0], [12.9, 5569.0], [13.0, 5629.0], [13.1, 5629.0], [13.2, 5629.0], [13.3, 5629.0], [13.4, 5629.0], [13.5, 5629.0], [13.6, 5629.0], [13.7, 5629.0], [13.8, 5629.0], [13.9, 5629.0], [14.0, 5632.0], [14.1, 5632.0], [14.2, 5632.0], [14.3, 5632.0], [14.4, 5632.0], [14.5, 5632.0], [14.6, 5632.0], [14.7, 5632.0], [14.8, 5632.0], [14.9, 5632.0], [15.0, 5765.0], [15.1, 5765.0], [15.2, 5765.0], [15.3, 5765.0], [15.4, 5765.0], [15.5, 5765.0], [15.6, 5765.0], [15.7, 5765.0], [15.8, 5765.0], [15.9, 5765.0], [16.0, 5773.0], [16.1, 5773.0], [16.2, 5773.0], [16.3, 5773.0], [16.4, 5773.0], [16.5, 5773.0], [16.6, 5773.0], [16.7, 5773.0], [16.8, 5773.0], [16.9, 5773.0], [17.0, 5783.0], [17.1, 5783.0], [17.2, 5783.0], [17.3, 5783.0], [17.4, 5783.0], [17.5, 5783.0], [17.6, 5783.0], [17.7, 5783.0], [17.8, 5783.0], [17.9, 5783.0], [18.0, 5877.0], [18.1, 5877.0], [18.2, 5877.0], [18.3, 5877.0], [18.4, 5877.0], [18.5, 5877.0], [18.6, 5877.0], [18.7, 5877.0], [18.8, 5877.0], [18.9, 5877.0], [19.0, 5881.0], [19.1, 5881.0], [19.2, 5881.0], [19.3, 5881.0], [19.4, 5881.0], [19.5, 5881.0], [19.6, 5881.0], [19.7, 5881.0], [19.8, 5881.0], [19.9, 5881.0], [20.0, 5912.0], [20.1, 5912.0], [20.2, 5912.0], [20.3, 5912.0], [20.4, 5912.0], [20.5, 5912.0], [20.6, 5912.0], [20.7, 5912.0], [20.8, 5912.0], [20.9, 5912.0], [21.0, 5963.0], [21.1, 5963.0], [21.2, 5963.0], [21.3, 5963.0], [21.4, 5963.0], [21.5, 5963.0], [21.6, 5963.0], [21.7, 5963.0], [21.8, 5963.0], [21.9, 5963.0], [22.0, 6102.0], [22.1, 6102.0], [22.2, 6102.0], [22.3, 6102.0], [22.4, 6102.0], [22.5, 6102.0], [22.6, 6102.0], [22.7, 6102.0], [22.8, 6102.0], [22.9, 6102.0], [23.0, 6126.0], [23.1, 6126.0], [23.2, 6126.0], [23.3, 6126.0], [23.4, 6126.0], [23.5, 6126.0], [23.6, 6126.0], [23.7, 6126.0], [23.8, 6126.0], [23.9, 6126.0], [24.0, 6149.0], [24.1, 6149.0], [24.2, 6149.0], [24.3, 6149.0], [24.4, 6149.0], [24.5, 6149.0], [24.6, 6149.0], [24.7, 6149.0], [24.8, 6149.0], [24.9, 6149.0], [25.0, 6181.0], [25.1, 6181.0], [25.2, 6181.0], [25.3, 6181.0], [25.4, 6181.0], [25.5, 6181.0], [25.6, 6181.0], [25.7, 6181.0], [25.8, 6181.0], [25.9, 6181.0], [26.0, 6228.0], [26.1, 6228.0], [26.2, 6228.0], [26.3, 6228.0], [26.4, 6228.0], [26.5, 6228.0], [26.6, 6228.0], [26.7, 6228.0], [26.8, 6228.0], [26.9, 6228.0], [27.0, 6276.0], [27.1, 6276.0], [27.2, 6276.0], [27.3, 6276.0], [27.4, 6276.0], [27.5, 6276.0], [27.6, 6276.0], [27.7, 6276.0], [27.8, 6276.0], [27.9, 6276.0], [28.0, 6292.0], [28.1, 6292.0], [28.2, 6292.0], [28.3, 6292.0], [28.4, 6292.0], [28.5, 6292.0], [28.6, 6292.0], [28.7, 6292.0], [28.8, 6292.0], [28.9, 6292.0], [29.0, 6379.0], [29.1, 6379.0], [29.2, 6379.0], [29.3, 6379.0], [29.4, 6379.0], [29.5, 6379.0], [29.6, 6379.0], [29.7, 6379.0], [29.8, 6379.0], [29.9, 6379.0], [30.0, 6399.0], [30.1, 6399.0], [30.2, 6399.0], [30.3, 6399.0], [30.4, 6399.0], [30.5, 6399.0], [30.6, 6399.0], [30.7, 6399.0], [30.8, 6399.0], [30.9, 6399.0], [31.0, 6433.0], [31.1, 6433.0], [31.2, 6433.0], [31.3, 6433.0], [31.4, 6433.0], [31.5, 6433.0], [31.6, 6433.0], [31.7, 6433.0], [31.8, 6433.0], [31.9, 6433.0], [32.0, 6513.0], [32.1, 6513.0], [32.2, 6513.0], [32.3, 6513.0], [32.4, 6513.0], [32.5, 6513.0], [32.6, 6513.0], [32.7, 6513.0], [32.8, 6513.0], [32.9, 6513.0], [33.0, 6570.0], [33.1, 6570.0], [33.2, 6570.0], [33.3, 6570.0], [33.4, 6570.0], [33.5, 6570.0], [33.6, 6570.0], [33.7, 6570.0], [33.8, 6570.0], [33.9, 6570.0], [34.0, 6584.0], [34.1, 6584.0], [34.2, 6584.0], [34.3, 6584.0], [34.4, 6584.0], [34.5, 6584.0], [34.6, 6584.0], [34.7, 6584.0], [34.8, 6584.0], [34.9, 6584.0], [35.0, 6626.0], [35.1, 6626.0], [35.2, 6626.0], [35.3, 6626.0], [35.4, 6626.0], [35.5, 6626.0], [35.6, 6626.0], [35.7, 6626.0], [35.8, 6626.0], [35.9, 6626.0], [36.0, 6683.0], [36.1, 6683.0], [36.2, 6683.0], [36.3, 6683.0], [36.4, 6683.0], [36.5, 6683.0], [36.6, 6683.0], [36.7, 6683.0], [36.8, 6683.0], [36.9, 6683.0], [37.0, 6709.0], [37.1, 6709.0], [37.2, 6709.0], [37.3, 6709.0], [37.4, 6709.0], [37.5, 6709.0], [37.6, 6709.0], [37.7, 6709.0], [37.8, 6709.0], [37.9, 6709.0], [38.0, 6726.0], [38.1, 6726.0], [38.2, 6726.0], [38.3, 6726.0], [38.4, 6726.0], [38.5, 6726.0], [38.6, 6726.0], [38.7, 6726.0], [38.8, 6726.0], [38.9, 6726.0], [39.0, 6770.0], [39.1, 6770.0], [39.2, 6770.0], [39.3, 6770.0], [39.4, 6770.0], [39.5, 6770.0], [39.6, 6770.0], [39.7, 6770.0], [39.8, 6770.0], [39.9, 6770.0], [40.0, 6776.0], [40.1, 6776.0], [40.2, 6776.0], [40.3, 6776.0], [40.4, 6776.0], [40.5, 6776.0], [40.6, 6776.0], [40.7, 6776.0], [40.8, 6776.0], [40.9, 6776.0], [41.0, 6852.0], [41.1, 6852.0], [41.2, 6852.0], [41.3, 6852.0], [41.4, 6852.0], [41.5, 6852.0], [41.6, 6852.0], [41.7, 6852.0], [41.8, 6852.0], [41.9, 6852.0], [42.0, 6882.0], [42.1, 6882.0], [42.2, 6882.0], [42.3, 6882.0], [42.4, 6882.0], [42.5, 6882.0], [42.6, 6882.0], [42.7, 6882.0], [42.8, 6882.0], [42.9, 6882.0], [43.0, 6943.0], [43.1, 6943.0], [43.2, 6943.0], [43.3, 6943.0], [43.4, 6943.0], [43.5, 6943.0], [43.6, 6943.0], [43.7, 6943.0], [43.8, 6943.0], [43.9, 6943.0], [44.0, 6944.0], [44.1, 6944.0], [44.2, 6944.0], [44.3, 6944.0], [44.4, 6944.0], [44.5, 6944.0], [44.6, 6944.0], [44.7, 6944.0], [44.8, 6944.0], [44.9, 6944.0], [45.0, 6991.0], [45.1, 6991.0], [45.2, 6991.0], [45.3, 6991.0], [45.4, 6991.0], [45.5, 6991.0], [45.6, 6991.0], [45.7, 6991.0], [45.8, 6991.0], [45.9, 6991.0], [46.0, 6998.0], [46.1, 6998.0], [46.2, 6998.0], [46.3, 6998.0], [46.4, 6998.0], [46.5, 6998.0], [46.6, 6998.0], [46.7, 6998.0], [46.8, 6998.0], [46.9, 6998.0], [47.0, 7001.0], [47.1, 7001.0], [47.2, 7001.0], [47.3, 7001.0], [47.4, 7001.0], [47.5, 7001.0], [47.6, 7001.0], [47.7, 7001.0], [47.8, 7001.0], [47.9, 7001.0], [48.0, 7059.0], [48.1, 7059.0], [48.2, 7059.0], [48.3, 7059.0], [48.4, 7059.0], [48.5, 7059.0], [48.6, 7059.0], [48.7, 7059.0], [48.8, 7059.0], [48.9, 7059.0], [49.0, 7097.0], [49.1, 7097.0], [49.2, 7097.0], [49.3, 7097.0], [49.4, 7097.0], [49.5, 7097.0], [49.6, 7097.0], [49.7, 7097.0], [49.8, 7097.0], [49.9, 7097.0], [50.0, 7111.0], [50.1, 7111.0], [50.2, 7111.0], [50.3, 7111.0], [50.4, 7111.0], [50.5, 7111.0], [50.6, 7111.0], [50.7, 7111.0], [50.8, 7111.0], [50.9, 7111.0], [51.0, 7234.0], [51.1, 7234.0], [51.2, 7234.0], [51.3, 7234.0], [51.4, 7234.0], [51.5, 7234.0], [51.6, 7234.0], [51.7, 7234.0], [51.8, 7234.0], [51.9, 7234.0], [52.0, 7264.0], [52.1, 7264.0], [52.2, 7264.0], [52.3, 7264.0], [52.4, 7264.0], [52.5, 7264.0], [52.6, 7264.0], [52.7, 7264.0], [52.8, 7264.0], [52.9, 7264.0], [53.0, 7322.0], [53.1, 7322.0], [53.2, 7322.0], [53.3, 7322.0], [53.4, 7322.0], [53.5, 7322.0], [53.6, 7322.0], [53.7, 7322.0], [53.8, 7322.0], [53.9, 7322.0], [54.0, 7438.0], [54.1, 7438.0], [54.2, 7438.0], [54.3, 7438.0], [54.4, 7438.0], [54.5, 7438.0], [54.6, 7438.0], [54.7, 7438.0], [54.8, 7438.0], [54.9, 7438.0], [55.0, 7447.0], [55.1, 7447.0], [55.2, 7447.0], [55.3, 7447.0], [55.4, 7447.0], [55.5, 7447.0], [55.6, 7447.0], [55.7, 7447.0], [55.8, 7447.0], [55.9, 7447.0], [56.0, 7480.0], [56.1, 7480.0], [56.2, 7480.0], [56.3, 7480.0], [56.4, 7480.0], [56.5, 7480.0], [56.6, 7480.0], [56.7, 7480.0], [56.8, 7480.0], [56.9, 7480.0], [57.0, 7487.0], [57.1, 7487.0], [57.2, 7487.0], [57.3, 7487.0], [57.4, 7487.0], [57.5, 7487.0], [57.6, 7487.0], [57.7, 7487.0], [57.8, 7487.0], [57.9, 7487.0], [58.0, 7521.0], [58.1, 7521.0], [58.2, 7521.0], [58.3, 7521.0], [58.4, 7521.0], [58.5, 7521.0], [58.6, 7521.0], [58.7, 7521.0], [58.8, 7521.0], [58.9, 7521.0], [59.0, 7583.0], [59.1, 7583.0], [59.2, 7583.0], [59.3, 7583.0], [59.4, 7583.0], [59.5, 7583.0], [59.6, 7583.0], [59.7, 7583.0], [59.8, 7583.0], [59.9, 7583.0], [60.0, 7651.0], [60.1, 7651.0], [60.2, 7651.0], [60.3, 7651.0], [60.4, 7651.0], [60.5, 7651.0], [60.6, 7651.0], [60.7, 7651.0], [60.8, 7651.0], [60.9, 7651.0], [61.0, 7683.0], [61.1, 7683.0], [61.2, 7683.0], [61.3, 7683.0], [61.4, 7683.0], [61.5, 7683.0], [61.6, 7683.0], [61.7, 7683.0], [61.8, 7683.0], [61.9, 7683.0], [62.0, 7780.0], [62.1, 7780.0], [62.2, 7780.0], [62.3, 7780.0], [62.4, 7780.0], [62.5, 7780.0], [62.6, 7780.0], [62.7, 7780.0], [62.8, 7780.0], [62.9, 7780.0], [63.0, 7814.0], [63.1, 7814.0], [63.2, 7814.0], [63.3, 7814.0], [63.4, 7814.0], [63.5, 7814.0], [63.6, 7814.0], [63.7, 7814.0], [63.8, 7814.0], [63.9, 7814.0], [64.0, 7822.0], [64.1, 7822.0], [64.2, 7822.0], [64.3, 7822.0], [64.4, 7822.0], [64.5, 7822.0], [64.6, 7822.0], [64.7, 7822.0], [64.8, 7822.0], [64.9, 7822.0], [65.0, 7932.0], [65.1, 7932.0], [65.2, 7932.0], [65.3, 7932.0], [65.4, 7932.0], [65.5, 7932.0], [65.6, 7932.0], [65.7, 7932.0], [65.8, 7932.0], [65.9, 7932.0], [66.0, 7955.0], [66.1, 7955.0], [66.2, 7955.0], [66.3, 7955.0], [66.4, 7955.0], [66.5, 7955.0], [66.6, 7955.0], [66.7, 7955.0], [66.8, 7955.0], [66.9, 7955.0], [67.0, 8006.0], [67.1, 8006.0], [67.2, 8006.0], [67.3, 8006.0], [67.4, 8006.0], [67.5, 8006.0], [67.6, 8006.0], [67.7, 8006.0], [67.8, 8006.0], [67.9, 8006.0], [68.0, 8097.0], [68.1, 8097.0], [68.2, 8097.0], [68.3, 8097.0], [68.4, 8097.0], [68.5, 8097.0], [68.6, 8097.0], [68.7, 8097.0], [68.8, 8097.0], [68.9, 8097.0], [69.0, 8176.0], [69.1, 8176.0], [69.2, 8176.0], [69.3, 8176.0], [69.4, 8176.0], [69.5, 8176.0], [69.6, 8176.0], [69.7, 8176.0], [69.8, 8176.0], [69.9, 8176.0], [70.0, 8222.0], [70.1, 8222.0], [70.2, 8222.0], [70.3, 8222.0], [70.4, 8222.0], [70.5, 8222.0], [70.6, 8222.0], [70.7, 8222.0], [70.8, 8222.0], [70.9, 8222.0], [71.0, 8262.0], [71.1, 8262.0], [71.2, 8262.0], [71.3, 8262.0], [71.4, 8262.0], [71.5, 8262.0], [71.6, 8262.0], [71.7, 8262.0], [71.8, 8262.0], [71.9, 8262.0], [72.0, 8294.0], [72.1, 8294.0], [72.2, 8294.0], [72.3, 8294.0], [72.4, 8294.0], [72.5, 8294.0], [72.6, 8294.0], [72.7, 8294.0], [72.8, 8294.0], [72.9, 8294.0], [73.0, 8298.0], [73.1, 8298.0], [73.2, 8298.0], [73.3, 8298.0], [73.4, 8298.0], [73.5, 8298.0], [73.6, 8298.0], [73.7, 8298.0], [73.8, 8298.0], [73.9, 8298.0], [74.0, 8341.0], [74.1, 8341.0], [74.2, 8341.0], [74.3, 8341.0], [74.4, 8341.0], [74.5, 8341.0], [74.6, 8341.0], [74.7, 8341.0], [74.8, 8341.0], [74.9, 8341.0], [75.0, 8388.0], [75.1, 8388.0], [75.2, 8388.0], [75.3, 8388.0], [75.4, 8388.0], [75.5, 8388.0], [75.6, 8388.0], [75.7, 8388.0], [75.8, 8388.0], [75.9, 8388.0], [76.0, 8396.0], [76.1, 8396.0], [76.2, 8396.0], [76.3, 8396.0], [76.4, 8396.0], [76.5, 8396.0], [76.6, 8396.0], [76.7, 8396.0], [76.8, 8396.0], [76.9, 8396.0], [77.0, 8416.0], [77.1, 8416.0], [77.2, 8416.0], [77.3, 8416.0], [77.4, 8416.0], [77.5, 8416.0], [77.6, 8416.0], [77.7, 8416.0], [77.8, 8416.0], [77.9, 8416.0], [78.0, 8478.0], [78.1, 8478.0], [78.2, 8478.0], [78.3, 8478.0], [78.4, 8478.0], [78.5, 8478.0], [78.6, 8478.0], [78.7, 8478.0], [78.8, 8478.0], [78.9, 8478.0], [79.0, 8497.0], [79.1, 8497.0], [79.2, 8497.0], [79.3, 8497.0], [79.4, 8497.0], [79.5, 8497.0], [79.6, 8497.0], [79.7, 8497.0], [79.8, 8497.0], [79.9, 8497.0], [80.0, 8675.0], [80.1, 8675.0], [80.2, 8675.0], [80.3, 8675.0], [80.4, 8675.0], [80.5, 8675.0], [80.6, 8675.0], [80.7, 8675.0], [80.8, 8675.0], [80.9, 8675.0], [81.0, 8690.0], [81.1, 8690.0], [81.2, 8690.0], [81.3, 8690.0], [81.4, 8690.0], [81.5, 8690.0], [81.6, 8690.0], [81.7, 8690.0], [81.8, 8690.0], [81.9, 8690.0], [82.0, 8696.0], [82.1, 8696.0], [82.2, 8696.0], [82.3, 8696.0], [82.4, 8696.0], [82.5, 8696.0], [82.6, 8696.0], [82.7, 8696.0], [82.8, 8696.0], [82.9, 8696.0], [83.0, 8873.0], [83.1, 8873.0], [83.2, 8873.0], [83.3, 8873.0], [83.4, 8873.0], [83.5, 8873.0], [83.6, 8873.0], [83.7, 8873.0], [83.8, 8873.0], [83.9, 8873.0], [84.0, 8912.0], [84.1, 8912.0], [84.2, 8912.0], [84.3, 8912.0], [84.4, 8912.0], [84.5, 8912.0], [84.6, 8912.0], [84.7, 8912.0], [84.8, 8912.0], [84.9, 8912.0], [85.0, 8931.0], [85.1, 8931.0], [85.2, 8931.0], [85.3, 8931.0], [85.4, 8931.0], [85.5, 8931.0], [85.6, 8931.0], [85.7, 8931.0], [85.8, 8931.0], [85.9, 8931.0], [86.0, 8950.0], [86.1, 8950.0], [86.2, 8950.0], [86.3, 8950.0], [86.4, 8950.0], [86.5, 8950.0], [86.6, 8950.0], [86.7, 8950.0], [86.8, 8950.0], [86.9, 8950.0], [87.0, 9057.0], [87.1, 9057.0], [87.2, 9057.0], [87.3, 9057.0], [87.4, 9057.0], [87.5, 9057.0], [87.6, 9057.0], [87.7, 9057.0], [87.8, 9057.0], [87.9, 9057.0], [88.0, 9184.0], [88.1, 9184.0], [88.2, 9184.0], [88.3, 9184.0], [88.4, 9184.0], [88.5, 9184.0], [88.6, 9184.0], [88.7, 9184.0], [88.8, 9184.0], [88.9, 9184.0], [89.0, 9284.0], [89.1, 9284.0], [89.2, 9284.0], [89.3, 9284.0], [89.4, 9284.0], [89.5, 9284.0], [89.6, 9284.0], [89.7, 9284.0], [89.8, 9284.0], [89.9, 9284.0], [90.0, 9336.0], [90.1, 9336.0], [90.2, 9336.0], [90.3, 9336.0], [90.4, 9336.0], [90.5, 9336.0], [90.6, 9336.0], [90.7, 9336.0], [90.8, 9336.0], [90.9, 9336.0], [91.0, 9354.0], [91.1, 9354.0], [91.2, 9354.0], [91.3, 9354.0], [91.4, 9354.0], [91.5, 9354.0], [91.6, 9354.0], [91.7, 9354.0], [91.8, 9354.0], [91.9, 9354.0], [92.0, 9608.0], [92.1, 9608.0], [92.2, 9608.0], [92.3, 9608.0], [92.4, 9608.0], [92.5, 9608.0], [92.6, 9608.0], [92.7, 9608.0], [92.8, 9608.0], [92.9, 9608.0], [93.0, 9969.0], [93.1, 9969.0], [93.2, 9969.0], [93.3, 9969.0], [93.4, 9969.0], [93.5, 9969.0], [93.6, 9969.0], [93.7, 9969.0], [93.8, 9969.0], [93.9, 9969.0], [94.0, 9978.0], [94.1, 9978.0], [94.2, 9978.0], [94.3, 9978.0], [94.4, 9978.0], [94.5, 9978.0], [94.6, 9978.0], [94.7, 9978.0], [94.8, 9978.0], [94.9, 9978.0], [95.0, 10414.0], [95.1, 10414.0], [95.2, 10414.0], [95.3, 10414.0], [95.4, 10414.0], [95.5, 10414.0], [95.6, 10414.0], [95.7, 10414.0], [95.8, 10414.0], [95.9, 10414.0], [96.0, 10666.0], [96.1, 10666.0], [96.2, 10666.0], [96.3, 10666.0], [96.4, 10666.0], [96.5, 10666.0], [96.6, 10666.0], [96.7, 10666.0], [96.8, 10666.0], [96.9, 10666.0], [97.0, 10946.0], [97.1, 10946.0], [97.2, 10946.0], [97.3, 10946.0], [97.4, 10946.0], [97.5, 10946.0], [97.6, 10946.0], [97.7, 10946.0], [97.8, 10946.0], [97.9, 10946.0], [98.0, 11035.0], [98.1, 11035.0], [98.2, 11035.0], [98.3, 11035.0], [98.4, 11035.0], [98.5, 11035.0], [98.6, 11035.0], [98.7, 11035.0], [98.8, 11035.0], [98.9, 11035.0], [99.0, 11505.0], [99.1, 11505.0], [99.2, 11505.0], [99.3, 11505.0], [99.4, 11505.0], [99.5, 11505.0], [99.6, 11505.0], [99.7, 11505.0], [99.8, 11505.0], [99.9, 11505.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 67.0, "series": [{"data": [[8400.0, 2.0], [8600.0, 1.0], [8200.0, 1.0], [8700.0, 3.0], [8300.0, 2.0], [8900.0, 1.0], [9400.0, 2.0], [9800.0, 1.0], [10000.0, 1.0], [10400.0, 1.0], [10300.0, 1.0], [10800.0, 1.0], [3700.0, 1.0], [4000.0, 1.0], [4200.0, 1.0], [4300.0, 1.0], [4500.0, 3.0], [4600.0, 2.0], [4900.0, 4.0], [5000.0, 2.0], [5200.0, 5.0], [5300.0, 2.0], [5500.0, 2.0], [5600.0, 5.0], [5800.0, 3.0], [6000.0, 3.0], [6100.0, 4.0], [5900.0, 2.0], [6200.0, 2.0], [6300.0, 4.0], [6400.0, 3.0], [6500.0, 1.0], [6600.0, 1.0], [6700.0, 2.0], [6900.0, 3.0], [6800.0, 2.0], [7000.0, 1.0], [7100.0, 2.0], [7200.0, 3.0], [7300.0, 3.0], [7600.0, 3.0], [7500.0, 2.0], [7700.0, 3.0], [7800.0, 3.0], [7900.0, 1.0], [8000.0, 1.0], [8100.0, 2.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[600.0, 33.0], [500.0, 67.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[4300.0, 1.0], [4500.0, 1.0], [4800.0, 1.0], [5100.0, 2.0], [4900.0, 1.0], [5000.0, 1.0], [5200.0, 2.0], [5500.0, 4.0], [5600.0, 2.0], [5800.0, 2.0], [5700.0, 3.0], [5900.0, 2.0], [6100.0, 4.0], [6300.0, 2.0], [6200.0, 3.0], [6400.0, 1.0], [6600.0, 2.0], [6500.0, 3.0], [6700.0, 4.0], [6800.0, 2.0], [6900.0, 4.0], [7000.0, 3.0], [7100.0, 1.0], [7200.0, 2.0], [7300.0, 1.0], [7400.0, 4.0], [7500.0, 2.0], [7600.0, 2.0], [7800.0, 2.0], [7900.0, 2.0], [7700.0, 1.0], [8100.0, 1.0], [8000.0, 2.0], [8200.0, 4.0], [8300.0, 3.0], [8400.0, 3.0], [8600.0, 3.0], [8900.0, 3.0], [9100.0, 1.0], [8800.0, 1.0], [9200.0, 1.0], [9000.0, 1.0], [9300.0, 2.0], [9600.0, 1.0], [9900.0, 2.0], [10400.0, 1.0], [10600.0, 1.0], [11000.0, 1.0], [10900.0, 1.0], [11500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 200.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 100.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 200.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 50.54, "minX": 1.61812524E12, "maxY": 50.54, "series": [{"data": [[1.61812524E12, 50.54]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61812524E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 519.0, "minX": 1.0, "maxY": 11505.0, "series": [{"data": [[2.0, 10352.0], [3.0, 10492.0], [4.0, 10075.0], [5.0, 9855.0], [6.0, 9426.0], [7.0, 9434.0], [8.0, 8799.0], [9.0, 8990.0], [10.0, 8355.0], [11.0, 8785.0], [12.0, 8460.0], [13.0, 8356.0], [14.0, 8724.0], [15.0, 8286.0], [16.0, 8158.0], [17.0, 7911.0], [18.0, 8123.0], [19.0, 8063.0], [20.0, 7703.0], [21.0, 8644.0], [22.0, 7850.0], [23.0, 8412.0], [24.0, 7847.0], [26.0, 7652.0], [27.0, 7891.0], [28.0, 7218.0], [29.0, 7367.0], [30.0, 7286.0], [31.0, 7118.0], [33.0, 7515.0], [35.0, 7669.0], [34.0, 6883.0], [36.0, 7676.0], [39.0, 7110.0], [38.0, 7473.0], [41.0, 6910.0], [40.0, 7649.0], [43.0, 7221.0], [42.0, 6841.0], [45.0, 7043.0], [44.0, 6358.0], [47.0, 6901.0], [46.0, 6387.0], [49.0, 6380.0], [48.0, 6368.0], [51.0, 6728.0], [50.0, 6119.0], [53.0, 6493.0], [52.0, 6268.0], [55.0, 6664.0], [54.0, 6997.0], [57.0, 6508.0], [56.0, 6722.0], [59.0, 6440.0], [58.0, 6407.0], [61.0, 5659.0], [60.0, 6161.0], [63.0, 6115.0], [62.0, 6091.0], [66.0, 6006.0], [65.0, 5910.0], [64.0, 5621.0], [71.0, 5686.0], [70.0, 5993.0], [69.0, 6240.0], [68.0, 5735.0], [75.0, 5513.0], [74.0, 5339.0], [73.0, 6011.0], [72.0, 6152.0], [79.0, 5201.0], [78.0, 5804.0], [77.0, 5251.0], [76.0, 5244.0], [83.0, 5067.0], [82.0, 5609.0], [81.0, 5892.0], [80.0, 5213.0], [87.0, 5012.0], [86.0, 4554.0], [85.0, 4933.0], [84.0, 5563.0], [91.0, 4637.0], [90.0, 4936.0], [89.0, 5276.0], [88.0, 5398.0], [95.0, 4543.0], [94.0, 4955.0], [93.0, 4960.0], [92.0, 4646.0], [99.0, 4047.0], [98.0, 4286.0], [97.0, 4528.0], [96.0, 4348.0], [100.0, 3773.0], [1.0, 10867.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[50.539999999999985, 6745.120000000002]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 594.0], [3.0, 542.0], [4.0, 590.0], [5.0, 558.0], [6.0, 542.0], [7.0, 542.0], [8.0, 537.0], [9.0, 616.0], [10.0, 557.0], [11.0, 568.0], [12.0, 596.0], [13.0, 593.0], [14.0, 559.0], [15.0, 585.0], [16.0, 537.0], [17.0, 585.0], [18.0, 565.0], [19.0, 611.0], [20.0, 591.0], [21.0, 539.0], [22.0, 565.0], [23.0, 519.0], [24.0, 547.0], [26.0, 590.0], [27.0, 586.0], [28.0, 562.0], [29.0, 637.0], [30.0, 535.0], [31.0, 565.0], [33.0, 621.0], [35.0, 593.0], [34.0, 603.0], [36.0, 622.0], [39.0, 539.0], [38.0, 591.5], [41.0, 537.0], [40.0, 573.0], [43.0, 592.0], [42.0, 639.0], [45.0, 538.0], [44.0, 585.0], [47.0, 536.0], [46.0, 613.0], [49.0, 618.0], [48.0, 623.0], [51.0, 592.0], [50.0, 607.0], [53.0, 617.0], [52.0, 613.0], [55.0, 568.0], [54.0, 523.0], [57.0, 588.0], [56.0, 541.0], [59.0, 617.0], [58.0, 536.0], [61.0, 633.0], [60.0, 614.0], [63.0, 566.0], [62.0, 616.0], [66.0, 563.0], [65.0, 602.0], [64.0, 559.0], [71.0, 589.0], [70.0, 590.0], [69.0, 611.0], [68.0, 568.0], [75.0, 587.0], [74.0, 573.0], [73.0, 614.0], [72.0, 617.0], [79.0, 563.0], [78.0, 594.0], [77.0, 532.0], [76.0, 632.0], [83.0, 561.0], [82.0, 540.0], [81.0, 541.0], [80.0, 560.0], [87.0, 619.0], [86.0, 612.0], [85.0, 611.0], [84.0, 563.0], [91.0, 567.0], [90.0, 592.0], [89.0, 605.0], [88.0, 564.0], [95.0, 541.0], [94.0, 614.0], [93.0, 601.0], [92.0, 616.0], [99.0, 533.0], [98.0, 586.0], [97.0, 583.0], [96.0, 559.0], [100.0, 553.0], [1.0, 638.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[50.539999999999985, 580.91]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 10946.0], [3.0, 11035.0], [4.0, 10666.0], [5.0, 10414.0], [6.0, 9969.0], [7.0, 9978.0], [8.0, 9336.0], [9.0, 9608.0], [10.0, 8912.0], [11.0, 9354.0], [12.0, 9057.0], [13.0, 8950.0], [14.0, 9284.0], [15.0, 8873.0], [16.0, 8696.0], [17.0, 8497.0], [18.0, 8690.0], [19.0, 8675.0], [20.0, 8294.0], [21.0, 9184.0], [22.0, 8416.0], [23.0, 8931.0], [24.0, 8396.0], [26.0, 8242.5], [27.0, 8478.0], [28.0, 7780.0], [29.0, 8006.0], [30.0, 7822.0], [31.0, 7683.0], [33.0, 8136.5], [35.0, 8262.0], [34.0, 7487.0], [36.0, 8298.0], [39.0, 7651.0], [38.0, 8065.5], [41.0, 7447.0], [40.0, 8222.0], [43.0, 7814.0], [42.0, 7480.0], [45.0, 7583.0], [44.0, 6943.0], [47.0, 7438.0], [46.0, 7001.0], [49.0, 6998.0], [48.0, 6991.0], [51.0, 7322.0], [50.0, 6726.0], [53.0, 7111.0], [52.0, 6882.0], [55.0, 7234.0], [54.0, 7521.0], [57.0, 7097.0], [56.0, 7264.0], [59.0, 7059.0], [58.0, 6944.0], [61.0, 6292.0], [60.0, 6776.0], [63.0, 6683.0], [62.0, 6709.0], [66.0, 6570.0], [65.0, 6513.0], [64.0, 6181.0], [71.0, 6276.0], [70.0, 6584.0], [69.0, 6852.0], [68.0, 6303.5], [75.0, 6102.0], [74.0, 5912.0], [73.0, 6626.0], [72.0, 6770.0], [79.0, 5765.0], [78.0, 6399.0], [77.0, 5783.0], [76.0, 5877.0], [83.0, 5629.0], [82.0, 6149.0], [81.0, 6433.0], [80.0, 5773.0], [87.0, 5632.0], [86.0, 5166.0], [85.0, 5546.0], [84.0, 6126.0], [91.0, 5206.0], [90.0, 5529.0], [89.0, 5881.0], [88.0, 5963.0], [95.0, 5085.0], [94.0, 5569.0], [93.0, 5561.0], [92.0, 5263.0], [99.0, 4582.0], [98.0, 4873.0], [97.0, 5112.0], [96.0, 4908.0], [100.0, 4327.0], [1.0, 11505.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[50.539999999999985, 7326.889999999999]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 840.0, "minX": 1.61812524E12, "maxY": 545550.0666666667, "series": [{"data": [[1.61812524E12, 545550.0666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61812524E12, 840.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61812524E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 580.91, "minX": 1.61812524E12, "maxY": 7326.889999999999, "series": [{"data": [[1.61812524E12, 6745.120000000002]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.61812524E12, 580.91]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.61812524E12, 7326.889999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61812524E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 580.8899999999999, "minX": 1.61812524E12, "maxY": 1988.1100000000004, "series": [{"data": [[1.61812524E12, 1988.1100000000004]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.61812524E12, 580.8899999999999]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.61812524E12, 580.8899999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61812524E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 289.1500000000001, "minX": 1.61812524E12, "maxY": 879.5500000000001, "series": [{"data": [[1.61812524E12, 879.5500000000001]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.61812524E12, 289.1500000000001]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.61812524E12, 289.1500000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61812524E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 519.0, "minX": 1.61812524E12, "maxY": 11505.0, "series": [{"data": [[1.61812524E12, 11505.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61812524E12, 8688.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61812524E12, 10945.210000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61812524E12, 9422.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61812524E12, 519.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61812524E12, 5879.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61812524E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 584.0, "minX": 4.0, "maxY": 10906.5, "series": [{"data": [[32.0, 8080.0], [16.0, 8892.5], [4.0, 10906.5], [10.0, 10026.5], [88.0, 584.0], [12.0, 2205.5], [48.0, 7227.5], [26.0, 5337.0], [52.0, 6156.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 88.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 584.0, "minX": 4.0, "maxY": 3069.0, "series": [{"data": [[32.0, 1016.5], [16.0, 980.0], [4.0, 3069.0], [10.0, 1098.0], [88.0, 584.0], [12.0, 588.5], [48.0, 967.0], [26.0, 952.5], [52.0, 968.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 88.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.61812524E12, "maxY": 5.0, "series": [{"data": [[1.61812524E12, 5.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61812524E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.61812524E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.61812524E12, 3.3333333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61812524E12, 1.6666666666666667]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61812524E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.61812524E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.61812524E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.61812524E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.61812524E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61812524E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.61812524E12, "maxY": 5.0, "series": [{"data": [[1.61812524E12, 5.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61812524E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

