<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0079)http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/ -->
<HTML><HEAD><TITLE>6.837 Assignment 4</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="Microsoft FrontPage 5.0" name=GENERATOR></HEAD>
<BODY text=#000000 bgColor=#ffffff 
background="6_837 Assignment 4_files/blbkgnd.gif">
<H1>Intro to Computer Graphics<BR>Assignment 4: Shadows, Reflection &amp; 
Refraction</H1>
<P>This week, we add global illumination to our Ray Caster. Because we cast 
secondary rays to account for shadows, reflection and refraction, we can now 
call it a Ray Tracer. You will encapsulate the high-level computation in a 
<TT>RayTracer</TT> class that will be responsible for sending rays and 
recursively computing colors along them. 
<P>To compute cast shadows, you will send rays from the visible point to each 
light source. If an intersection is reported, the visible point is in shadow and 
the contribution from that light source is ignored. Note that shadow rays must 
be sent to all light sources. To add reflection and refraction effects, you need 
to send secondary rays in the mirror and transmitted directions, as explained in 
lecture. The computation is recursive to account for multiple reflections and or 
refractions. 
<P>For debugging we provide you with code to visualize the ray tree created 
while computing the color of a single pixel. 
<H3>Tasks</H3>
<UL>
  <LI>Expand your Material classes to store the reflective &amp; transparent 
  multipliers and the index of refraction, which are necessary for recursive ray 
  tracing. The prototype for the <TT>PhongMaterial</TT> constructor should be: <PRE>  PhongMaterial::PhongMaterial(const Vec3f &amp;diffuseColor, 
                               const Vec3f &amp;specularColor, 
                               float exponent,
                               const Vec3f &amp;reflectiveColor, 
                               const Vec3f &amp;transparentColor, 
                               float indexOfRefraction); 
</PRE>
  <P>You should also implement appropriate accessor functions for these fields. 
  <P></P>
  <LI>Create a new class <TT>RayTracer</TT> that computes the radiance (color) 
  along a ray. Update your main function to use this class for the rays through 
  each pixel. This class encapsulates the computation of radiance (color) along 
  rays. It stores a pointer to the <TT>SceneParser</TT> for access to the 
  geometry and light sources. Your constructor should have these arguments (and 
  maybe others, depending on how you handle command line arguments): <PRE>   RayTracer(SceneParser *s, int max_bounces, float cutoff_weight, bool shadows, ...);
</PRE>
  <P>The main method of this class is <TT>traceRay</TT> that, given a ray, 
  computes the color seen from the origin along the direction. This computation 
  is recursive for reflected or transparent materials. We therefore need a 
  stopping criterion to prevent infinite recursion. <TT>traceRay</TT> takes as 
  additional parameters the current number of bounces (recursion depth) and a 
  ray weight that indicates the percent contribution of this ray to the final 
  pixel color. The corresponding maximum recursion depth and the cutoff ray 
  weight are fields of <TT>RayTracer</TT>, which are passed as command line 
  arguments to the program. Note that weight is a scalar that corresponds to the 
  magnitude of the color vector. <PRE>  Vec3f traceRay(Ray &amp;ray, float tmin, int bounces, float weight, 
                 float indexOfRefraction, Hit &amp;hit) const;
</PRE>
  <P>To refract rays through transparent objects, <TT>traceRay</TT> is also 
  passed the <TT>indexOfRefraction</TT> (see below), and returns the closest 
  intersection in <TT>hit</TT>, which is used to create the depth &amp; normal 
  visualizations. You can test your code at this point with examples from 
  previous assignments. 
  <P></P>
  <LI>Add support for the new command line arguments: <TT>-shadows</TT>, which 
  indicates that shadow rays are to be cast, and <TT>-bounces</TT> and 
  <TT>-weight</TT>, which control the depth of recursion in your ray tracer. 
  <P></P>
  <LI>Implement cast shadows by sending rays toward each light source to test 
  whether the line segment joining the intersection point and the light source 
  intersects an object. If there is an intersection, then discard the 
  contribution of that light source. Recall that you must displace the ray 
  origin slightly away from the surface, or equivalently set <TT>tmin</TT> as 
  <EM>epsilon</EM>. Note that in this naive version, semi-transparent objects 
  still cast opaque shadows. Implement something better for extra credit. 
  <P></P>
  <LI>Implement mirror reflections for reflective materials 
  (<TT>getReflectiveColor()</TT> &gt; (0,0,0)) by sending a ray from the current 
  intersection point in the mirror direction. For this, we suggest you write a 
  function: <PRE>   Vec3f mirrorDirection(const Vec3f &amp;normal, const Vec3f &amp;incoming);
</PRE>
  <P>Trace the secondary ray with a recursive call to <TT>traceRay</TT> using 
  modified values for the recursion depth and ray weight. The ray weight is 
  simply multiplied by the magnitude of the reflected color. Make sure that 
  <TT>traceRay</TT> checks the appropriate stopping conditions. Add the 
  reflected contribution to the color computed for the current ray. Don't forget 
  to take into account the reflection coefficient of the material. 
  <P></P>
  <LI>Implement transparency effects by sending rays recursively in the 
  refracted direction. If the material is transparent 
  (<TT>getTransparentColor()</TT> &gt; (0,0,0)), trace a new ray in the 
  transmitted direction. We suggest you implement a function 
  <TT>transmittedDirection</TT> that given an incident vector, a normal and the 
  indices of refraction, returns the transmitted direction. <PRE>   bool transmittedDirection(const Vec3f &amp;normal, const Vec3f &amp;incoming, 
      float index_i, float index_t, Vec3f &amp;transmitted);
</PRE>
  <P>We make the simplifying assumption that our transparent objects exist in a 
  vacuum, with no intersecting or nested refracting materials. This allows us to 
  determine the incident and transmitted index of refraction simply by looking 
  at the dot product between the normal and the incoming ray. You may assume 
  that the camera is always placed outside of transparent objects. 
  <P>However, be careful about the direction of the vectors and the ratio of 
  refraction indices. Because we now consider transparent objects, we might hit 
  the surface of a primitive from either side, depending on whether we were 
  inside or outside the object. The <TT>-shade_back</TT> command line option 
  should be used when there are transparent objects in the scene. 
  <P>The dot product of the normal and ray direction is negative when we are 
  outside the object, and positive when we are inside. You will use this to 
  detect whether the new index of refraction is 1 or the index of the hit 
  object. Also, the index of refraction for the material surrounding the ray 
  origin is passed as an argument to <TT>traceRay</TT>. 
  <P></P>
  <LI>We provide a <TT>RayTree</TT> visualization tool to help you debug your 
  recursive ray implementation. This tool is activated by pressing the 
  '<TT>t</TT>' key within the OpenGL previsualization. Insert the following 
  commands within your <TT>Raytracer::traceRay()</TT> method as appropriate: <PRE>   void RayTree::SetMainSegment(const Ray &amp;ray, float tstart, float tstop);
   void RayTree::AddShadowSegment(const Ray &amp;ray, float tstart, float tstop);
   void RayTree::AddReflectedSegment(const Ray &amp;ray, float tstart, float tstop);
   void RayTree::AddTransmittedSegment(const Ray &amp;ray, float tstart, float tstop);
</PRE>
  <P>The main ray is visualized in gray, shadow rays green, reflected rays red 
  and transmitted rays blue. You will not create an instance of 
  <TT>RayTree</TT>, but rather just call the static member functions. The calls 
  will look something like: <PRE>   RayTree::SetMainSegment(myRay,0,t);
</PRE>
  <P>Most of the time these function calls do nothing. But when the 
  <TT>RayTree</TT> is activated, the segments of the ray tree will be recorded. 
  The <TT>glCanvas::initialize</TT> method now requires a third argument: <PRE>   void initialize(SceneParser *_scene, void (*_renderFunction)(void), void (*_traceRayFunction)(float, float));
</PRE>
  <P>You'll need to provide a function that takes in two floating point numbers, 
  the x and y coordinates in screenspace (0,0) -&gt; (1,1) of the current mouse 
  position, and traces the ray through the scene. Your call to <TT>traceRay</TT> 
  from within <TT>traceRayFunction</TT> should look very similar to your call to 
  <TT>traceRay</TT> from within your main rendering loop. Note: all the 
  activation/deactivation of the <TT>RayTree</TT> is taken care of in 
  <TT>GLCanvas::keyboard()</TT>. 
  <UL>
    <LI><A 
    href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/rayTree.h">rayTree.h</A> 

    <LI><A 
    href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/rayTree.C">rayTree.C</A> 

    <LI><A 
    href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/glCanvas.h">glCanvas.h</A> 

    <LI><A 
    href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/glCanvas.C">glCanvas.C</A> 
    </LI></UL>
  <P></P>
  <LI>Incorporate the updated code for point light sources and verify that your 
  shading and shadowing implementation correctly renders these lights. The 
  <TT>PointLight</TT> source method <TT>getIllumination()</TT> method handles 
  the distance attenuation term needed for Phong shading. The physically correct 
  attenuation term, 1/d<SUP>2</SUP>, is not always used for raytracing because 
  it results in images with high contrast that are difficult to properly display 
  on low dynamic range devices. Often 1/d or constant attenuation is used 
  instead (see examples below). 
  <P>
  <UL>
    <LI><A 
    href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/light.h">light.h</A> 

    <LI><A 
    href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/light.C">light.C</A> 
    </LI></UL></LI></UL>
<H3>Hints</H3>
<UL>
  <P>
  <LI>You do not need to declare all methods in a class virtual, only the ones 
  which subclasses will override. 
  <P></P>
  <LI>Print as much information as you need for debugging. When you get weird 
  results, don't hesitate to use simple cases, and do the calculations manually 
  to verify your results. Perhaps instead of casting all the rays needed to 
  create an image, just cast a single ray (and its corresponding ray tree). 
  <P></P>
  <LI>Modify the test scenes to reduce complexity for debugging: remove objects, 
  remove light sources, change the parameters of the materials so that you can 
  view the contributions of the different components, etc. 
  <P></P>
  <LI>Comment your code, we take this into account when grading. </LI></UL>
<H3>Ideas for Extra Credit</H3>
<UL>
  <LI>Render semi-transparent shadows where the attenuation depends on the 
  distance traveled in the transparent object; nested refracting materials; 
  shadow ray acceleration using early termination and without returning the 
  normal and material; Fresnel reflection term; other BRDF models such as 
  Cook-Torrance or Ward; anisotropic BRDFs, etc. </LI></UL>
<H3>Updated Scene Parser</H3>
<UL>
  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene_parser.h">scene_parser.h</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene_parser.C">scene_parser.C</A> 
  </LI></UL>
<H3>Input Files</H3>
<P>
<UL>
  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_01_sphere_shadow.txt">scene4_01_sphere_shadow.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_02_colored_shadows.txt">scene4_02_colored_shadows.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_03_mirrored_floor.txt">scene4_03_mirrored_floor.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_04_reflective_sphere.txt">scene4_04_reflective_sphere.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_05_transparent_bar.txt">scene4_05_transparent_bar.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_06_transparent_bars.txt">scene4_06_transparent_bars.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_07_transparent_sphere_1.0.txt">scene4_07_transparent_sphere_1.0.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_08_transparent_sphere_1.1.txt">scene4_08_transparent_sphere_1.1.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_09_transparent_sphere_2.0.txt">scene4_09_transparent_sphere_2.0.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_10_point_light_distance.txt">scene4_10_point_light_distance.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_11_point_light_circle.txt">scene4_11_point_light_circle.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_12_point_light_circle_d_attenuation.txt">scene4_12_point_light_circle_d_attenuation.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_13_point_light_circle_d2_attenuation.txt">scene4_13_point_light_circle_d2_attenuation.txt</A> 

  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/scene4_14_faceted_gem.txt">scene4_14_faceted_gem.txt</A> 
  </LI></UL>
<H3>Triangle Meshes (.obj format)</H3>
<P>
<UL>
  <LI><A 
  href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/assignment4/diamond.obj">diamond.obj</A> 
  </LI></UL>
<H3>Sample Results</H3><PRE>raytracer -input scene4_01_sphere_shadow.txt -size 200 200 -output output4_01.tga -shadows 
</PRE>
<IMG src="6_837 Assignment 4_files/output4_01.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_02_colored_shadows.txt -size 200 200 -output output4_02.tga -shadows -gui -tessellation 50 25 -gouraud
</PRE>
<IMG src="6_837 Assignment 4_files/viewer4_02a.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/viewer4_02b.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/output4_02.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_03_mirrored_floor.txt -size 200 200 -output output4_03.tga -shadows -bounces 1 -weight 0.01 -gui
</PRE>
<IMG src="6_837 Assignment 4_files/viewer4_03a.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/viewer4_03b.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/viewer4_03c.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/output4_03.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_04_reflective_sphere.txt -size 200 200 -output output4_04a.tga -shadows -bounces 0 -weight 0.01
raytracer -input scene4_04_reflective_sphere.txt -size 200 200 -output output4_04b.tga -shadows -bounces 1 -weight 0.01
raytracer -input scene4_04_reflective_sphere.txt -size 200 200 -output output4_04c.tga -shadows -bounces 2 -weight 0.01
raytracer -input scene4_04_reflective_sphere.txt -size 200 200 -output output4_04d.tga -shadows -bounces 3 -weight 0.01
</PRE>
<IMG src="6_837 Assignment 4_files/output4_04a.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_04b.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_04c.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_04d.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_05_transparent_bar.txt -size 200 200 -output output4_05.tga -shadows -bounces 10 -weight 0.01 -shade_back -gui
</PRE>
<IMG src="6_837 Assignment 4_files/viewer4_05.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/output4_05.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_06_transparent_bars.txt -size 200 200 -output output4_06a.tga -shadows -bounces 0 -weight 0.01 -shade_back -gui
raytracer -input scene4_06_transparent_bars.txt -size 200 200 -output output4_06b.tga -shadows -bounces 1 -weight 0.01 -shade_back -gui
raytracer -input scene4_06_transparent_bars.txt -size 200 200 -output output4_06c.tga -shadows -bounces 2 -weight 0.01 -shade_back -gui
raytracer -input scene4_06_transparent_bars.txt -size 200 200 -output output4_06d.tga -shadows -bounces 3 -weight 0.01 -shade_back -gui
raytracer -input scene4_06_transparent_bars.txt -size 200 200 -output output4_06e.tga -shadows -bounces 4 -weight 0.01 -shade_back -gui
raytracer -input scene4_06_transparent_bars.txt -size 200 200 -output output4_06f.tga -shadows -bounces 5 -weight 0.01 -shade_back -gui
</PRE>
<IMG src="6_837 Assignment 4_files/output4_06a.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_06b.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_06c.png" width="200" height="200"><BR>
<IMG 
src="6_837 Assignment 4_files/output4_06d.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_06e.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_06f.png" width="200" height="200"> 
<P><EM>With OPTIONAL transparent_shadows</EM> <BR>
<IMG 
src="6_837 Assignment 4_files/output4_06a_ts.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_06b_ts.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_06c_ts.png" width="200" height="200"><BR>
<IMG 
src="6_837 Assignment 4_files/output4_06d_ts.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_06e_ts.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_06f_ts.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_07_transparent_sphere_1.0.txt -size 200 200 -output output4_07.tga -shadows -bounces 5 -weight 0.01 -shade_back -gui -tessellation 30 15
raytracer -input scene4_08_transparent_sphere_1.1.txt -size 200 200 -output output4_08.tga -shadows -bounces 5 -weight 0.01 -shade_back -gui -tessellation 30 15
raytracer -input scene4_09_transparent_sphere_2.0.txt -size 200 200 -output output4_09.tga -shadows -bounces 5 -weight 0.01 -shade_back -gui -tessellation 30 15
</PRE>
<IMG src="6_837 Assignment 4_files/viewer4_07.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/viewer4_08.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/viewer4_09.png" width="208" height="225"><BR>
<IMG 
src="6_837 Assignment 4_files/output4_07.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_08.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_09.png" width="200" height="200"> 
<P><EM>With OPTIONAL transparent_shadows</EM> <BR>
<IMG 
src="6_837 Assignment 4_files/output4_07_ts.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_08_ts.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_09_ts.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_10_point_light_distance.txt -size 200 200 -output output4_10.tga -shadows -gui
</PRE>
<IMG src="6_837 Assignment 4_files/viewer4_10a.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/viewer4_10b.png" width="208" height="225"> 
<IMG 
src="6_837 Assignment 4_files/output4_10.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_11_point_light_circle.txt -size 200 200 -output output4_11.tga -shadows 
raytracer -input scene4_12_point_light_circle_d_attenuation.txt -size 200 200 -output output4_12.tga -shadows 
raytracer -input scene4_13_point_light_circle_d2_attenuation.txt -size 200 200 -output output4_13.tga -shadows 
</PRE>
<IMG src="6_837 Assignment 4_files/output4_11.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_12.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_13.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_14_faceted_gem.txt -size 200 200 -output output4_14a.tga -shadows -shade_back -bounces 0 -weight 0.01 
raytracer -input scene4_14_faceted_gem.txt -size 200 200 -output output4_14b.tga -shadows -shade_back -bounces 1 -weight 0.01 
raytracer -input scene4_14_faceted_gem.txt -size 200 200 -output output4_14c.tga -shadows -shade_back -bounces 2 -weight 0.01 
raytracer -input scene4_14_faceted_gem.txt -size 200 200 -output output4_14d.tga -shadows -shade_back -bounces 3 -weight 0.01 
raytracer -input scene4_14_faceted_gem.txt -size 200 200 -output output4_14e.tga -shadows -shade_back -bounces 4 -weight 0.01 
raytracer -input scene4_14_faceted_gem.txt -size 200 200 -output output4_14f.tga -shadows -shade_back -bounces 5 -weight 0.01 
</PRE>
<IMG src="6_837 Assignment 4_files/output4_14a.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_14b.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_14c.png" width="200" height="200"><BR>
<IMG 
src="6_837 Assignment 4_files/output4_14d.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_14e.png" width="200" height="200"> 
<IMG 
src="6_837 Assignment 4_files/output4_14f.png" width="200" height="200"> 
<P><PRE>raytracer -input scene4_14_faceted_gem.txt -size 200 200 -shadows -shade_back -bounces 1 -weight 0.01 -gui
raytracer -input scene4_14_faceted_gem.txt -size 200 200 -shadows -shade_back -bounces 2 -weight 0.01 -gui
raytracer -input scene4_14_faceted_gem.txt -size 200 200 -shadows -shade_back -bounces 3 -weight 0.01 -gui
</PRE>
<IMG src="6_837 Assignment 4_files/viewer4_14b.png" width="212" height="227"> 
<IMG 
src="6_837 Assignment 4_files/viewer4_14c.png" width="212" height="227"> 
<IMG 
src="6_837 Assignment 4_files/viewer4_14d.png" width="212" height="227"> 
<P>See the main <A 
href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/assignments/index.html">Assignments 
Page</A> for submission information. 
<HR>
</BODY></HTML>